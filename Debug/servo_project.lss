
servo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  000028f6  0000298a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080020e  0080020e  00002a98  2**0
                  ALLOC
  3 .stab         000020dc  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bab  00000000  00000000  00004b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000571f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000058bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00007ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009232  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000a8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b28d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ef       	ldi	r30, 0xF6	; 246
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 31       	cpi	r26, 0x11	; 17
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 96 0c 	call	0x192c	; 0x192c <main>
      9e:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__fixunssfsi>:
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	7b 01       	movw	r14, r22
      b0:	8c 01       	movw	r16, r24
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__gesf2>
      be:	88 23       	and	r24, r24
      c0:	8c f0       	brlt	.+34     	; 0xe4 <__fixunssfsi+0x3e>
      c2:	c8 01       	movw	r24, r16
      c4:	b7 01       	movw	r22, r14
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e4       	ldi	r21, 0x4F	; 79
      ce:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
      d2:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
      d6:	9b 01       	movw	r18, r22
      d8:	ac 01       	movw	r20, r24
      da:	20 50       	subi	r18, 0x00	; 0
      dc:	30 40       	sbci	r19, 0x00	; 0
      de:	40 40       	sbci	r20, 0x00	; 0
      e0:	50 48       	sbci	r21, 0x80	; 128
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <__fixunssfsi+0x4a>
      e4:	c8 01       	movw	r24, r16
      e6:	b7 01       	movw	r22, r14
      e8:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	b9 01       	movw	r22, r18
      f2:	ca 01       	movw	r24, r20
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	ff 90       	pop	r15
      fa:	ef 90       	pop	r14
      fc:	08 95       	ret

000000fe <_fpadd_parts>:
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e8       	ldi	r30, 0x85	; 133
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__>
     10a:	dc 01       	movw	r26, r24
     10c:	2b 01       	movw	r4, r22
     10e:	fa 01       	movw	r30, r20
     110:	9c 91       	ld	r25, X
     112:	92 30       	cpi	r25, 0x02	; 2
     114:	08 f4       	brcc	.+2      	; 0x118 <_fpadd_parts+0x1a>
     116:	39 c1       	rjmp	.+626    	; 0x38a <_fpadd_parts+0x28c>
     118:	eb 01       	movw	r28, r22
     11a:	88 81       	ld	r24, Y
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	08 f4       	brcc	.+2      	; 0x122 <_fpadd_parts+0x24>
     120:	33 c1       	rjmp	.+614    	; 0x388 <_fpadd_parts+0x28a>
     122:	94 30       	cpi	r25, 0x04	; 4
     124:	69 f4       	brne	.+26     	; 0x140 <_fpadd_parts+0x42>
     126:	84 30       	cpi	r24, 0x04	; 4
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x2e>
     12a:	2f c1       	rjmp	.+606    	; 0x38a <_fpadd_parts+0x28c>
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	9c 91       	ld	r25, X
     130:	11 97       	sbiw	r26, 0x01	; 1
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	98 17       	cp	r25, r24
     136:	09 f4       	brne	.+2      	; 0x13a <_fpadd_parts+0x3c>
     138:	28 c1       	rjmp	.+592    	; 0x38a <_fpadd_parts+0x28c>
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	25 c1       	rjmp	.+586    	; 0x38a <_fpadd_parts+0x28c>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <_fpadd_parts+0x48>
     144:	21 c1       	rjmp	.+578    	; 0x388 <_fpadd_parts+0x28a>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	a9 f4       	brne	.+42     	; 0x174 <_fpadd_parts+0x76>
     14a:	92 30       	cpi	r25, 0x02	; 2
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x52>
     14e:	1d c1       	rjmp	.+570    	; 0x38a <_fpadd_parts+0x28c>
     150:	9a 01       	movw	r18, r20
     152:	ad 01       	movw	r20, r26
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	ea 01       	movw	r28, r20
     158:	09 90       	ld	r0, Y+
     15a:	ae 01       	movw	r20, r28
     15c:	e9 01       	movw	r28, r18
     15e:	09 92       	st	Y+, r0
     160:	9e 01       	movw	r18, r28
     162:	81 50       	subi	r24, 0x01	; 1
     164:	c1 f7       	brne	.-16     	; 0x156 <_fpadd_parts+0x58>
     166:	e2 01       	movw	r28, r4
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	81 83       	std	Z+1, r24	; 0x01
     172:	08 c1       	rjmp	.+528    	; 0x384 <_fpadd_parts+0x286>
     174:	92 30       	cpi	r25, 0x02	; 2
     176:	09 f4       	brne	.+2      	; 0x17a <_fpadd_parts+0x7c>
     178:	07 c1       	rjmp	.+526    	; 0x388 <_fpadd_parts+0x28a>
     17a:	12 96       	adiw	r26, 0x02	; 2
     17c:	2d 90       	ld	r2, X+
     17e:	3c 90       	ld	r3, X
     180:	13 97       	sbiw	r26, 0x03	; 3
     182:	eb 01       	movw	r28, r22
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	14 96       	adiw	r26, 0x04	; 4
     18a:	ad 90       	ld	r10, X+
     18c:	bd 90       	ld	r11, X+
     18e:	cd 90       	ld	r12, X+
     190:	dc 90       	ld	r13, X
     192:	17 97       	sbiw	r26, 0x07	; 7
     194:	ec 80       	ldd	r14, Y+4	; 0x04
     196:	fd 80       	ldd	r15, Y+5	; 0x05
     198:	0e 81       	ldd	r16, Y+6	; 0x06
     19a:	1f 81       	ldd	r17, Y+7	; 0x07
     19c:	91 01       	movw	r18, r2
     19e:	28 1b       	sub	r18, r24
     1a0:	39 0b       	sbc	r19, r25
     1a2:	b9 01       	movw	r22, r18
     1a4:	37 ff       	sbrs	r19, 7
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xb2>
     1a8:	66 27       	eor	r22, r22
     1aa:	77 27       	eor	r23, r23
     1ac:	62 1b       	sub	r22, r18
     1ae:	73 0b       	sbc	r23, r19
     1b0:	60 32       	cpi	r22, 0x20	; 32
     1b2:	71 05       	cpc	r23, r1
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_fpadd_parts+0xba>
     1b6:	61 c0       	rjmp	.+194    	; 0x27a <_fpadd_parts+0x17c>
     1b8:	12 16       	cp	r1, r18
     1ba:	13 06       	cpc	r1, r19
     1bc:	6c f5       	brge	.+90     	; 0x218 <_fpadd_parts+0x11a>
     1be:	37 01       	movw	r6, r14
     1c0:	48 01       	movw	r8, r16
     1c2:	06 2e       	mov	r0, r22
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_fpadd_parts+0xd0>
     1c6:	96 94       	lsr	r9
     1c8:	87 94       	ror	r8
     1ca:	77 94       	ror	r7
     1cc:	67 94       	ror	r6
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <_fpadd_parts+0xc8>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_fpadd_parts+0xe6>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	44 1f       	adc	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	6a 95       	dec	r22
     1e6:	d2 f7       	brpl	.-12     	; 0x1dc <_fpadd_parts+0xde>
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	40 40       	sbci	r20, 0x00	; 0
     1ee:	50 40       	sbci	r21, 0x00	; 0
     1f0:	2e 21       	and	r18, r14
     1f2:	3f 21       	and	r19, r15
     1f4:	40 23       	and	r20, r16
     1f6:	51 23       	and	r21, r17
     1f8:	21 15       	cp	r18, r1
     1fa:	31 05       	cpc	r19, r1
     1fc:	41 05       	cpc	r20, r1
     1fe:	51 05       	cpc	r21, r1
     200:	21 f0       	breq	.+8      	; 0x20a <_fpadd_parts+0x10c>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	79 01       	movw	r14, r18
     20c:	8a 01       	movw	r16, r20
     20e:	e6 28       	or	r14, r6
     210:	f7 28       	or	r15, r7
     212:	08 29       	or	r16, r8
     214:	19 29       	or	r17, r9
     216:	3c c0       	rjmp	.+120    	; 0x290 <_fpadd_parts+0x192>
     218:	23 2b       	or	r18, r19
     21a:	d1 f1       	breq	.+116    	; 0x290 <_fpadd_parts+0x192>
     21c:	26 0e       	add	r2, r22
     21e:	37 1e       	adc	r3, r23
     220:	35 01       	movw	r6, r10
     222:	46 01       	movw	r8, r12
     224:	06 2e       	mov	r0, r22
     226:	04 c0       	rjmp	.+8      	; 0x230 <_fpadd_parts+0x132>
     228:	96 94       	lsr	r9
     22a:	87 94       	ror	r8
     22c:	77 94       	ror	r7
     22e:	67 94       	ror	r6
     230:	0a 94       	dec	r0
     232:	d2 f7       	brpl	.-12     	; 0x228 <_fpadd_parts+0x12a>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x148>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x140>
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	40 40       	sbci	r20, 0x00	; 0
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	2a 21       	and	r18, r10
     254:	3b 21       	and	r19, r11
     256:	4c 21       	and	r20, r12
     258:	5d 21       	and	r21, r13
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	41 05       	cpc	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	21 f0       	breq	.+8      	; 0x26c <_fpadd_parts+0x16e>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	59 01       	movw	r10, r18
     26e:	6a 01       	movw	r12, r20
     270:	a6 28       	or	r10, r6
     272:	b7 28       	or	r11, r7
     274:	c8 28       	or	r12, r8
     276:	d9 28       	or	r13, r9
     278:	0b c0       	rjmp	.+22     	; 0x290 <_fpadd_parts+0x192>
     27a:	82 15       	cp	r24, r2
     27c:	93 05       	cpc	r25, r3
     27e:	2c f0       	brlt	.+10     	; 0x28a <_fpadd_parts+0x18c>
     280:	1c 01       	movw	r2, r24
     282:	aa 24       	eor	r10, r10
     284:	bb 24       	eor	r11, r11
     286:	65 01       	movw	r12, r10
     288:	03 c0       	rjmp	.+6      	; 0x290 <_fpadd_parts+0x192>
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 91       	ld	r25, X
     294:	d2 01       	movw	r26, r4
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	8c 91       	ld	r24, X
     29a:	98 17       	cp	r25, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_fpadd_parts+0x1a2>
     29e:	45 c0       	rjmp	.+138    	; 0x32a <_fpadd_parts+0x22c>
     2a0:	99 23       	and	r25, r25
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <_fpadd_parts+0x1b4>
     2a4:	a8 01       	movw	r20, r16
     2a6:	97 01       	movw	r18, r14
     2a8:	2a 19       	sub	r18, r10
     2aa:	3b 09       	sbc	r19, r11
     2ac:	4c 09       	sbc	r20, r12
     2ae:	5d 09       	sbc	r21, r13
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_fpadd_parts+0x1c0>
     2b2:	a6 01       	movw	r20, r12
     2b4:	95 01       	movw	r18, r10
     2b6:	2e 19       	sub	r18, r14
     2b8:	3f 09       	sbc	r19, r15
     2ba:	40 0b       	sbc	r20, r16
     2bc:	51 0b       	sbc	r21, r17
     2be:	57 fd       	sbrc	r21, 7
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_fpadd_parts+0x1d4>
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	33 82       	std	Z+3, r3	; 0x03
     2c6:	22 82       	std	Z+2, r2	; 0x02
     2c8:	24 83       	std	Z+4, r18	; 0x04
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	46 83       	std	Z+6, r20	; 0x06
     2ce:	57 83       	std	Z+7, r21	; 0x07
     2d0:	1d c0       	rjmp	.+58     	; 0x30c <_fpadd_parts+0x20e>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	33 82       	std	Z+3, r3	; 0x03
     2d8:	22 82       	std	Z+2, r2	; 0x02
     2da:	88 27       	eor	r24, r24
     2dc:	99 27       	eor	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a4 0b       	sbc	r26, r20
     2e6:	b5 0b       	sbc	r27, r21
     2e8:	84 83       	std	Z+4, r24	; 0x04
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	a6 83       	std	Z+6, r26	; 0x06
     2ee:	b7 83       	std	Z+7, r27	; 0x07
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <_fpadd_parts+0x20e>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	44 1f       	adc	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	35 83       	std	Z+5, r19	; 0x05
     2fe:	46 83       	std	Z+6, r20	; 0x06
     300:	57 83       	std	Z+7, r21	; 0x07
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	93 83       	std	Z+3, r25	; 0x03
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	24 81       	ldd	r18, Z+4	; 0x04
     30e:	35 81       	ldd	r19, Z+5	; 0x05
     310:	46 81       	ldd	r20, Z+6	; 0x06
     312:	57 81       	ldd	r21, Z+7	; 0x07
     314:	da 01       	movw	r26, r20
     316:	c9 01       	movw	r24, r18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	af 4f       	sbci	r26, 0xFF	; 255
     324:	bf 43       	sbci	r27, 0x3F	; 63
     326:	28 f3       	brcs	.-54     	; 0x2f2 <_fpadd_parts+0x1f4>
     328:	0b c0       	rjmp	.+22     	; 0x340 <_fpadd_parts+0x242>
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	33 82       	std	Z+3, r3	; 0x03
     32e:	22 82       	std	Z+2, r2	; 0x02
     330:	ea 0c       	add	r14, r10
     332:	fb 1c       	adc	r15, r11
     334:	0c 1d       	adc	r16, r12
     336:	1d 1d       	adc	r17, r13
     338:	e4 82       	std	Z+4, r14	; 0x04
     33a:	f5 82       	std	Z+5, r15	; 0x05
     33c:	06 83       	std	Z+6, r16	; 0x06
     33e:	17 83       	std	Z+7, r17	; 0x07
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 83       	st	Z, r24
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
     348:	46 81       	ldd	r20, Z+6	; 0x06
     34a:	57 81       	ldd	r21, Z+7	; 0x07
     34c:	57 ff       	sbrs	r21, 7
     34e:	1a c0       	rjmp	.+52     	; 0x384 <_fpadd_parts+0x286>
     350:	c9 01       	movw	r24, r18
     352:	aa 27       	eor	r26, r26
     354:	97 fd       	sbrc	r25, 7
     356:	a0 95       	com	r26
     358:	ba 2f       	mov	r27, r26
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	90 70       	andi	r25, 0x00	; 0
     35e:	a0 70       	andi	r26, 0x00	; 0
     360:	b0 70       	andi	r27, 0x00	; 0
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	37 95       	ror	r19
     368:	27 95       	ror	r18
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	a4 2b       	or	r26, r20
     370:	b5 2b       	or	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	df 01       	movw	r26, r30
     386:	01 c0       	rjmp	.+2      	; 0x38a <_fpadd_parts+0x28c>
     388:	d2 01       	movw	r26, r4
     38a:	cd 01       	movw	r24, r26
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e2 e1       	ldi	r30, 0x12	; 18
     392:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__>

00000396 <__subsf3>:
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 ed       	ldi	r30, 0xD1	; 209
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x18>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	2d 83       	std	Y+5, r18	; 0x05
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	4f 83       	std	Y+7, r20	; 0x07
     3b0:	58 87       	std	Y+8, r21	; 0x08
     3b2:	e9 e0       	ldi	r30, 0x09	; 9
     3b4:	ee 2e       	mov	r14, r30
     3b6:	f1 2c       	mov	r15, r1
     3b8:	ec 0e       	add	r14, r28
     3ba:	fd 1e       	adc	r15, r29
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	b7 01       	movw	r22, r14
     3c2:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5e       	subi	r16, 0xEF	; 239
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	05 96       	adiw	r24, 0x05	; 5
     3d0:	b8 01       	movw	r22, r16
     3d2:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	89 27       	eor	r24, r25
     3dc:	8a 8b       	std	Y+18, r24	; 0x12
     3de:	c7 01       	movw	r24, r14
     3e0:	b8 01       	movw	r22, r16
     3e2:	ae 01       	movw	r20, r28
     3e4:	47 5e       	subi	r20, 0xE7	; 231
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     3ec:	0e 94 60 05 	call	0xac0	; 0xac0 <__pack_f>
     3f0:	a0 96       	adiw	r28, 0x20	; 32
     3f2:	e6 e0       	ldi	r30, 0x06	; 6
     3f4:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x18>

000003f8 <__addsf3>:
     3f8:	a0 e2       	ldi	r26, 0x20	; 32
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x18>
     404:	69 83       	std	Y+1, r22	; 0x01
     406:	7a 83       	std	Y+2, r23	; 0x02
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	2d 83       	std	Y+5, r18	; 0x05
     40e:	3e 83       	std	Y+6, r19	; 0x06
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	58 87       	std	Y+8, r21	; 0x08
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	ef 2e       	mov	r14, r31
     418:	f1 2c       	mov	r15, r1
     41a:	ec 0e       	add	r14, r28
     41c:	fd 1e       	adc	r15, r29
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	b7 01       	movw	r22, r14
     424:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     428:	8e 01       	movw	r16, r28
     42a:	0f 5e       	subi	r16, 0xEF	; 239
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ce 01       	movw	r24, r28
     430:	05 96       	adiw	r24, 0x05	; 5
     432:	b8 01       	movw	r22, r16
     434:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     438:	c7 01       	movw	r24, r14
     43a:	b8 01       	movw	r22, r16
     43c:	ae 01       	movw	r20, r28
     43e:	47 5e       	subi	r20, 0xE7	; 231
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     446:	0e 94 60 05 	call	0xac0	; 0xac0 <__pack_f>
     44a:	a0 96       	adiw	r28, 0x20	; 32
     44c:	e6 e0       	ldi	r30, 0x06	; 6
     44e:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x18>

00000452 <__mulsf3>:
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ef e2       	ldi	r30, 0x2F	; 47
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	2d 83       	std	Y+5, r18	; 0x05
     468:	3e 83       	std	Y+6, r19	; 0x06
     46a:	4f 83       	std	Y+7, r20	; 0x07
     46c:	58 87       	std	Y+8, r21	; 0x08
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	be 01       	movw	r22, r28
     474:	67 5f       	subi	r22, 0xF7	; 247
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	be 01       	movw	r22, r28
     482:	6f 5e       	subi	r22, 0xEF	; 239
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	88 f0       	brcs	.+34     	; 0x4b2 <__mulsf3+0x60>
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	c8 f0       	brcs	.+50     	; 0x4c8 <__mulsf3+0x76>
     496:	94 30       	cpi	r25, 0x04	; 4
     498:	19 f4       	brne	.+6      	; 0x4a0 <__mulsf3+0x4e>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	51 f4       	brne	.+20     	; 0x4b2 <__mulsf3+0x60>
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__mulsf3+0x56>
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__mulsf3+0x5c>
     4a4:	92 30       	cpi	r25, 0x02	; 2
     4a6:	81 f4       	brne	.+32     	; 0x4c8 <__mulsf3+0x76>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	c6 c0       	rjmp	.+396    	; 0x63a <__mulsf3+0x1e8>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <__mulsf3+0x72>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	98 13       	cpse	r25, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 87       	std	Y+10, r18	; 0x0a
     4be:	ce 01       	movw	r24, r28
     4c0:	09 96       	adiw	r24, 0x09	; 9
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__mulsf3+0x1e8>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	49 f4       	brne	.+18     	; 0x4da <__mulsf3+0x88>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	98 13       	cpse	r25, r24
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2a 8b       	std	Y+18, r18	; 0x12
     4d4:	ce 01       	movw	r24, r28
     4d6:	41 96       	adiw	r24, 0x11	; 17
     4d8:	b0 c0       	rjmp	.+352    	; 0x63a <__mulsf3+0x1e8>
     4da:	2d 84       	ldd	r2, Y+13	; 0x0d
     4dc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4de:	4f 84       	ldd	r4, Y+15	; 0x0f
     4e0:	58 88       	ldd	r5, Y+16	; 0x10
     4e2:	6d 88       	ldd	r6, Y+21	; 0x15
     4e4:	7e 88       	ldd	r7, Y+22	; 0x16
     4e6:	8f 88       	ldd	r8, Y+23	; 0x17
     4e8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ea:	ee 24       	eor	r14, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	87 01       	movw	r16, r14
     4f0:	aa 24       	eor	r10, r10
     4f2:	bb 24       	eor	r11, r11
     4f4:	65 01       	movw	r12, r10
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	c1 01       	movw	r24, r2
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 70       	andi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	e9 f0       	breq	.+58     	; 0x546 <__mulsf3+0xf4>
     50c:	e6 0c       	add	r14, r6
     50e:	f7 1c       	adc	r15, r7
     510:	08 1d       	adc	r16, r8
     512:	19 1d       	adc	r17, r9
     514:	9a 01       	movw	r18, r20
     516:	ab 01       	movw	r20, r22
     518:	2a 0d       	add	r18, r10
     51a:	3b 1d       	adc	r19, r11
     51c:	4c 1d       	adc	r20, r12
     51e:	5d 1d       	adc	r21, r13
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e6 14       	cp	r14, r6
     52a:	f7 04       	cpc	r15, r7
     52c:	08 05       	cpc	r16, r8
     52e:	19 05       	cpc	r17, r9
     530:	20 f4       	brcc	.+8      	; 0x53a <__mulsf3+0xe8>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	a9 01       	movw	r20, r18
     53e:	48 0f       	add	r20, r24
     540:	59 1f       	adc	r21, r25
     542:	6a 1f       	adc	r22, r26
     544:	7b 1f       	adc	r23, r27
     546:	aa 0c       	add	r10, r10
     548:	bb 1c       	adc	r11, r11
     54a:	cc 1c       	adc	r12, r12
     54c:	dd 1c       	adc	r13, r13
     54e:	97 fe       	sbrs	r9, 7
     550:	08 c0       	rjmp	.+16     	; 0x562 <__mulsf3+0x110>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	a8 2a       	or	r10, r24
     55c:	b9 2a       	or	r11, r25
     55e:	ca 2a       	or	r12, r26
     560:	db 2a       	or	r13, r27
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	e0 32       	cpi	r30, 0x20	; 32
     566:	f1 05       	cpc	r31, r1
     568:	49 f0       	breq	.+18     	; 0x57c <__mulsf3+0x12a>
     56a:	66 0c       	add	r6, r6
     56c:	77 1c       	adc	r7, r7
     56e:	88 1c       	adc	r8, r8
     570:	99 1c       	adc	r9, r9
     572:	56 94       	lsr	r5
     574:	47 94       	ror	r4
     576:	37 94       	ror	r3
     578:	27 94       	ror	r2
     57a:	c3 cf       	rjmp	.-122    	; 0x502 <__mulsf3+0xb0>
     57c:	fa 85       	ldd	r31, Y+10	; 0x0a
     57e:	ea 89       	ldd	r30, Y+18	; 0x12
     580:	2b 89       	ldd	r18, Y+19	; 0x13
     582:	3c 89       	ldd	r19, Y+20	; 0x14
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	28 0f       	add	r18, r24
     58a:	39 1f       	adc	r19, r25
     58c:	2e 5f       	subi	r18, 0xFE	; 254
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__mulsf3+0x16e>
     592:	ca 01       	movw	r24, r20
     594:	81 70       	andi	r24, 0x01	; 1
     596:	90 70       	andi	r25, 0x00	; 0
     598:	89 2b       	or	r24, r25
     59a:	61 f0       	breq	.+24     	; 0x5b4 <__mulsf3+0x162>
     59c:	16 95       	lsr	r17
     59e:	07 95       	ror	r16
     5a0:	f7 94       	ror	r15
     5a2:	e7 94       	ror	r14
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e8       	ldi	r27, 0x80	; 128
     5ac:	e8 2a       	or	r14, r24
     5ae:	f9 2a       	or	r15, r25
     5b0:	0a 2b       	or	r16, r26
     5b2:	1b 2b       	or	r17, r27
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
     5b8:	57 95       	ror	r21
     5ba:	47 95       	ror	r20
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__mulsf3+0x140>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__mulsf3+0x18c>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	66 1f       	adc	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	17 fd       	sbrc	r17, 7
     5d0:	41 60       	ori	r20, 0x01	; 1
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 30       	cpi	r20, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	59 07       	cpc	r21, r25
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	69 07       	cpc	r22, r25
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	79 07       	cpc	r23, r25
     5ec:	60 f3       	brcs	.-40     	; 0x5c6 <__mulsf3+0x174>
     5ee:	2b 8f       	std	Y+27, r18	; 0x1b
     5f0:	3c 8f       	std	Y+28, r19	; 0x1c
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	90 70       	andi	r25, 0x00	; 0
     5fa:	a0 70       	andi	r26, 0x00	; 0
     5fc:	b0 70       	andi	r27, 0x00	; 0
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	61 f4       	brne	.+24     	; 0x620 <__mulsf3+0x1ce>
     608:	47 fd       	sbrc	r20, 7
     60a:	0a c0       	rjmp	.+20     	; 0x620 <__mulsf3+0x1ce>
     60c:	e1 14       	cp	r14, r1
     60e:	f1 04       	cpc	r15, r1
     610:	01 05       	cpc	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	29 f0       	breq	.+10     	; 0x620 <__mulsf3+0x1ce>
     616:	40 5c       	subi	r20, 0xC0	; 192
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	6f 4f       	sbci	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	40 78       	andi	r20, 0x80	; 128
     620:	1a 8e       	std	Y+26, r1	; 0x1a
     622:	fe 17       	cp	r31, r30
     624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1d8>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8a 8f       	std	Y+26, r24	; 0x1a
     62a:	4d 8f       	std	Y+29, r20	; 0x1d
     62c:	5e 8f       	std	Y+30, r21	; 0x1e
     62e:	6f 8f       	std	Y+31, r22	; 0x1f
     630:	78 a3       	std	Y+32, r23	; 0x20
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	89 8f       	std	Y+25, r24	; 0x19
     636:	ce 01       	movw	r24, r28
     638:	49 96       	adiw	r24, 0x19	; 25
     63a:	0e 94 60 05 	call	0xac0	; 0xac0 <__pack_f>
     63e:	a0 96       	adiw	r28, 0x20	; 32
     640:	e2 e1       	ldi	r30, 0x12	; 18
     642:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__>

00000646 <__divsf3>:
     646:	a8 e1       	ldi	r26, 0x18	; 24
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x10>
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	2d 83       	std	Y+5, r18	; 0x05
     65c:	3e 83       	std	Y+6, r19	; 0x06
     65e:	4f 83       	std	Y+7, r20	; 0x07
     660:	58 87       	std	Y+8, r21	; 0x08
     662:	b9 e0       	ldi	r27, 0x09	; 9
     664:	eb 2e       	mov	r14, r27
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	b7 01       	movw	r22, r14
     672:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     676:	8e 01       	movw	r16, r28
     678:	0f 5e       	subi	r16, 0xEF	; 239
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	b8 01       	movw	r22, r16
     682:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     686:	29 85       	ldd	r18, Y+9	; 0x09
     688:	22 30       	cpi	r18, 0x02	; 2
     68a:	08 f4       	brcc	.+2      	; 0x68e <__divsf3+0x48>
     68c:	7e c0       	rjmp	.+252    	; 0x78a <__divsf3+0x144>
     68e:	39 89       	ldd	r19, Y+17	; 0x11
     690:	32 30       	cpi	r19, 0x02	; 2
     692:	10 f4       	brcc	.+4      	; 0x698 <__divsf3+0x52>
     694:	b8 01       	movw	r22, r16
     696:	7c c0       	rjmp	.+248    	; 0x790 <__divsf3+0x14a>
     698:	8a 85       	ldd	r24, Y+10	; 0x0a
     69a:	9a 89       	ldd	r25, Y+18	; 0x12
     69c:	89 27       	eor	r24, r25
     69e:	8a 87       	std	Y+10, r24	; 0x0a
     6a0:	24 30       	cpi	r18, 0x04	; 4
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <__divsf3+0x62>
     6a4:	22 30       	cpi	r18, 0x02	; 2
     6a6:	31 f4       	brne	.+12     	; 0x6b4 <__divsf3+0x6e>
     6a8:	23 17       	cp	r18, r19
     6aa:	09 f0       	breq	.+2      	; 0x6ae <__divsf3+0x68>
     6ac:	6e c0       	rjmp	.+220    	; 0x78a <__divsf3+0x144>
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	6e c0       	rjmp	.+220    	; 0x790 <__divsf3+0x14a>
     6b4:	34 30       	cpi	r19, 0x04	; 4
     6b6:	39 f4       	brne	.+14     	; 0x6c6 <__divsf3+0x80>
     6b8:	1d 86       	std	Y+13, r1	; 0x0d
     6ba:	1e 86       	std	Y+14, r1	; 0x0e
     6bc:	1f 86       	std	Y+15, r1	; 0x0f
     6be:	18 8a       	std	Y+16, r1	; 0x10
     6c0:	1c 86       	std	Y+12, r1	; 0x0c
     6c2:	1b 86       	std	Y+11, r1	; 0x0b
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divsf3+0x88>
     6c6:	32 30       	cpi	r19, 0x02	; 2
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <__divsf3+0x8c>
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	89 87       	std	Y+9, r24	; 0x09
     6ce:	b7 01       	movw	r22, r14
     6d0:	5f c0       	rjmp	.+190    	; 0x790 <__divsf3+0x14a>
     6d2:	2b 85       	ldd	r18, Y+11	; 0x0b
     6d4:	3c 85       	ldd	r19, Y+12	; 0x0c
     6d6:	8b 89       	ldd	r24, Y+19	; 0x13
     6d8:	9c 89       	ldd	r25, Y+20	; 0x14
     6da:	28 1b       	sub	r18, r24
     6dc:	39 0b       	sbc	r19, r25
     6de:	3c 87       	std	Y+12, r19	; 0x0c
     6e0:	2b 87       	std	Y+11, r18	; 0x0b
     6e2:	ed 84       	ldd	r14, Y+13	; 0x0d
     6e4:	fe 84       	ldd	r15, Y+14	; 0x0e
     6e6:	0f 85       	ldd	r16, Y+15	; 0x0f
     6e8:	18 89       	ldd	r17, Y+16	; 0x10
     6ea:	ad 88       	ldd	r10, Y+21	; 0x15
     6ec:	be 88       	ldd	r11, Y+22	; 0x16
     6ee:	cf 88       	ldd	r12, Y+23	; 0x17
     6f0:	d8 8c       	ldd	r13, Y+24	; 0x18
     6f2:	ea 14       	cp	r14, r10
     6f4:	fb 04       	cpc	r15, r11
     6f6:	0c 05       	cpc	r16, r12
     6f8:	1d 05       	cpc	r17, r13
     6fa:	40 f4       	brcc	.+16     	; 0x70c <__divsf3+0xc6>
     6fc:	ee 0c       	add	r14, r14
     6fe:	ff 1c       	adc	r15, r15
     700:	00 1f       	adc	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	21 50       	subi	r18, 0x01	; 1
     706:	30 40       	sbci	r19, 0x00	; 0
     708:	3c 87       	std	Y+12, r19	; 0x0c
     70a:	2b 87       	std	Y+11, r18	; 0x0b
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e4       	ldi	r27, 0x40	; 64
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	ea 14       	cp	r14, r10
     722:	fb 04       	cpc	r15, r11
     724:	0c 05       	cpc	r16, r12
     726:	1d 05       	cpc	r17, r13
     728:	40 f0       	brcs	.+16     	; 0x73a <__divsf3+0xf4>
     72a:	28 2b       	or	r18, r24
     72c:	39 2b       	or	r19, r25
     72e:	4a 2b       	or	r20, r26
     730:	5b 2b       	or	r21, r27
     732:	ea 18       	sub	r14, r10
     734:	fb 08       	sbc	r15, r11
     736:	0c 09       	sbc	r16, r12
     738:	1d 09       	sbc	r17, r13
     73a:	b6 95       	lsr	r27
     73c:	a7 95       	ror	r26
     73e:	97 95       	ror	r25
     740:	87 95       	ror	r24
     742:	ee 0c       	add	r14, r14
     744:	ff 1c       	adc	r15, r15
     746:	00 1f       	adc	r16, r16
     748:	11 1f       	adc	r17, r17
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	6f 31       	cpi	r22, 0x1F	; 31
     750:	71 05       	cpc	r23, r1
     752:	31 f7       	brne	.-52     	; 0x720 <__divsf3+0xda>
     754:	da 01       	movw	r26, r20
     756:	c9 01       	movw	r24, r18
     758:	8f 77       	andi	r24, 0x7F	; 127
     75a:	90 70       	andi	r25, 0x00	; 0
     75c:	a0 70       	andi	r26, 0x00	; 0
     75e:	b0 70       	andi	r27, 0x00	; 0
     760:	80 34       	cpi	r24, 0x40	; 64
     762:	91 05       	cpc	r25, r1
     764:	a1 05       	cpc	r26, r1
     766:	b1 05       	cpc	r27, r1
     768:	61 f4       	brne	.+24     	; 0x782 <__divsf3+0x13c>
     76a:	27 fd       	sbrc	r18, 7
     76c:	0a c0       	rjmp	.+20     	; 0x782 <__divsf3+0x13c>
     76e:	e1 14       	cp	r14, r1
     770:	f1 04       	cpc	r15, r1
     772:	01 05       	cpc	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	29 f0       	breq	.+10     	; 0x782 <__divsf3+0x13c>
     778:	20 5c       	subi	r18, 0xC0	; 192
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
     77c:	4f 4f       	sbci	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	20 78       	andi	r18, 0x80	; 128
     782:	2d 87       	std	Y+13, r18	; 0x0d
     784:	3e 87       	std	Y+14, r19	; 0x0e
     786:	4f 87       	std	Y+15, r20	; 0x0f
     788:	58 8b       	std	Y+16, r21	; 0x10
     78a:	be 01       	movw	r22, r28
     78c:	67 5f       	subi	r22, 0xF7	; 247
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	cb 01       	movw	r24, r22
     792:	0e 94 60 05 	call	0xac0	; 0xac0 <__pack_f>
     796:	68 96       	adiw	r28, 0x18	; 24
     798:	ea e0       	ldi	r30, 0x0A	; 10
     79a:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x10>

0000079e <__gtsf2>:
     79e:	a8 e1       	ldi	r26, 0x18	; 24
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	e5 ed       	ldi	r30, 0xD5	; 213
     7a4:	f3 e0       	ldi	r31, 0x03	; 3
     7a6:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x18>
     7aa:	69 83       	std	Y+1, r22	; 0x01
     7ac:	7a 83       	std	Y+2, r23	; 0x02
     7ae:	8b 83       	std	Y+3, r24	; 0x03
     7b0:	9c 83       	std	Y+4, r25	; 0x04
     7b2:	2d 83       	std	Y+5, r18	; 0x05
     7b4:	3e 83       	std	Y+6, r19	; 0x06
     7b6:	4f 83       	std	Y+7, r20	; 0x07
     7b8:	58 87       	std	Y+8, r21	; 0x08
     7ba:	89 e0       	ldi	r24, 0x09	; 9
     7bc:	e8 2e       	mov	r14, r24
     7be:	f1 2c       	mov	r15, r1
     7c0:	ec 0e       	add	r14, r28
     7c2:	fd 1e       	adc	r15, r29
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	b7 01       	movw	r22, r14
     7ca:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     7ce:	8e 01       	movw	r16, r28
     7d0:	0f 5e       	subi	r16, 0xEF	; 239
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	ce 01       	movw	r24, r28
     7d6:	05 96       	adiw	r24, 0x05	; 5
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	40 f0       	brcs	.+16     	; 0x7f4 <__gtsf2+0x56>
     7e4:	89 89       	ldd	r24, Y+17	; 0x11
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	28 f0       	brcs	.+10     	; 0x7f4 <__gtsf2+0x56>
     7ea:	c7 01       	movw	r24, r14
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__fpcmp_parts_f>
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <__gtsf2+0x58>
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	68 96       	adiw	r28, 0x18	; 24
     7f8:	e6 e0       	ldi	r30, 0x06	; 6
     7fa:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x18>

000007fe <__gesf2>:
     7fe:	a8 e1       	ldi	r26, 0x18	; 24
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x18>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	2d 83       	std	Y+5, r18	; 0x05
     814:	3e 83       	std	Y+6, r19	; 0x06
     816:	4f 83       	std	Y+7, r20	; 0x07
     818:	58 87       	std	Y+8, r21	; 0x08
     81a:	89 e0       	ldi	r24, 0x09	; 9
     81c:	e8 2e       	mov	r14, r24
     81e:	f1 2c       	mov	r15, r1
     820:	ec 0e       	add	r14, r28
     822:	fd 1e       	adc	r15, r29
     824:	ce 01       	movw	r24, r28
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	b7 01       	movw	r22, r14
     82a:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     82e:	8e 01       	movw	r16, r28
     830:	0f 5e       	subi	r16, 0xEF	; 239
     832:	1f 4f       	sbci	r17, 0xFF	; 255
     834:	ce 01       	movw	r24, r28
     836:	05 96       	adiw	r24, 0x05	; 5
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     83e:	89 85       	ldd	r24, Y+9	; 0x09
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	40 f0       	brcs	.+16     	; 0x854 <__gesf2+0x56>
     844:	89 89       	ldd	r24, Y+17	; 0x11
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	28 f0       	brcs	.+10     	; 0x854 <__gesf2+0x56>
     84a:	c7 01       	movw	r24, r14
     84c:	b8 01       	movw	r22, r16
     84e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__fpcmp_parts_f>
     852:	01 c0       	rjmp	.+2      	; 0x856 <__gesf2+0x58>
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	68 96       	adiw	r28, 0x18	; 24
     858:	e6 e0       	ldi	r30, 0x06	; 6
     85a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x18>

0000085e <__ltsf2>:
     85e:	a8 e1       	ldi	r26, 0x18	; 24
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x18>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	2d 83       	std	Y+5, r18	; 0x05
     874:	3e 83       	std	Y+6, r19	; 0x06
     876:	4f 83       	std	Y+7, r20	; 0x07
     878:	58 87       	std	Y+8, r21	; 0x08
     87a:	89 e0       	ldi	r24, 0x09	; 9
     87c:	e8 2e       	mov	r14, r24
     87e:	f1 2c       	mov	r15, r1
     880:	ec 0e       	add	r14, r28
     882:	fd 1e       	adc	r15, r29
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	b7 01       	movw	r22, r14
     88a:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     88e:	8e 01       	movw	r16, r28
     890:	0f 5e       	subi	r16, 0xEF	; 239
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	ce 01       	movw	r24, r28
     896:	05 96       	adiw	r24, 0x05	; 5
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	40 f0       	brcs	.+16     	; 0x8b4 <__ltsf2+0x56>
     8a4:	89 89       	ldd	r24, Y+17	; 0x11
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	28 f0       	brcs	.+10     	; 0x8b4 <__ltsf2+0x56>
     8aa:	c7 01       	movw	r24, r14
     8ac:	b8 01       	movw	r22, r16
     8ae:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__fpcmp_parts_f>
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__ltsf2+0x58>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	68 96       	adiw	r28, 0x18	; 24
     8b8:	e6 e0       	ldi	r30, 0x06	; 6
     8ba:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x18>

000008be <__floatsisf>:
     8be:	a8 e0       	ldi	r26, 0x08	; 8
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	e5 e6       	ldi	r30, 0x65	; 101
     8c4:	f4 e0       	ldi	r31, 0x04	; 4
     8c6:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x12>
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	89 83       	std	Y+1, r24	; 0x01
     8d2:	da 01       	movw	r26, r20
     8d4:	c9 01       	movw	r24, r18
     8d6:	88 27       	eor	r24, r24
     8d8:	b7 fd       	sbrc	r27, 7
     8da:	83 95       	inc	r24
     8dc:	99 27       	eor	r25, r25
     8de:	aa 27       	eor	r26, r26
     8e0:	bb 27       	eor	r27, r27
     8e2:	b8 2e       	mov	r11, r24
     8e4:	21 15       	cp	r18, r1
     8e6:	31 05       	cpc	r19, r1
     8e8:	41 05       	cpc	r20, r1
     8ea:	51 05       	cpc	r21, r1
     8ec:	19 f4       	brne	.+6      	; 0x8f4 <__floatsisf+0x36>
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	3a c0       	rjmp	.+116    	; 0x968 <__stack+0x69>
     8f4:	88 23       	and	r24, r24
     8f6:	a9 f0       	breq	.+42     	; 0x922 <__stack+0x23>
     8f8:	20 30       	cpi	r18, 0x00	; 0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	38 07       	cpc	r19, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	48 07       	cpc	r20, r24
     902:	80 e8       	ldi	r24, 0x80	; 128
     904:	58 07       	cpc	r21, r24
     906:	29 f4       	brne	.+10     	; 0x912 <__stack+0x13>
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	9f ec       	ldi	r25, 0xCF	; 207
     910:	30 c0       	rjmp	.+96     	; 0x972 <__stack+0x73>
     912:	ee 24       	eor	r14, r14
     914:	ff 24       	eor	r15, r15
     916:	87 01       	movw	r16, r14
     918:	e2 1a       	sub	r14, r18
     91a:	f3 0a       	sbc	r15, r19
     91c:	04 0b       	sbc	r16, r20
     91e:	15 0b       	sbc	r17, r21
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
     922:	79 01       	movw	r14, r18
     924:	8a 01       	movw	r16, r20
     926:	8e e1       	ldi	r24, 0x1E	; 30
     928:	c8 2e       	mov	r12, r24
     92a:	d1 2c       	mov	r13, r1
     92c:	dc 82       	std	Y+4, r13	; 0x04
     92e:	cb 82       	std	Y+3, r12	; 0x03
     930:	ed 82       	std	Y+5, r14	; 0x05
     932:	fe 82       	std	Y+6, r15	; 0x06
     934:	0f 83       	std	Y+7, r16	; 0x07
     936:	18 87       	std	Y+8, r17	; 0x08
     938:	c8 01       	movw	r24, r16
     93a:	b7 01       	movw	r22, r14
     93c:	0e 94 11 05 	call	0xa22	; 0xa22 <__clzsi2>
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	18 16       	cp	r1, r24
     944:	19 06       	cpc	r1, r25
     946:	84 f4       	brge	.+32     	; 0x968 <__stack+0x69>
     948:	08 2e       	mov	r0, r24
     94a:	04 c0       	rjmp	.+8      	; 0x954 <__stack+0x55>
     94c:	ee 0c       	add	r14, r14
     94e:	ff 1c       	adc	r15, r15
     950:	00 1f       	adc	r16, r16
     952:	11 1f       	adc	r17, r17
     954:	0a 94       	dec	r0
     956:	d2 f7       	brpl	.-12     	; 0x94c <__stack+0x4d>
     958:	ed 82       	std	Y+5, r14	; 0x05
     95a:	fe 82       	std	Y+6, r15	; 0x06
     95c:	0f 83       	std	Y+7, r16	; 0x07
     95e:	18 87       	std	Y+8, r17	; 0x08
     960:	c8 1a       	sub	r12, r24
     962:	d9 0a       	sbc	r13, r25
     964:	dc 82       	std	Y+4, r13	; 0x04
     966:	cb 82       	std	Y+3, r12	; 0x03
     968:	ba 82       	std	Y+2, r11	; 0x02
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	0e 94 60 05 	call	0xac0	; 0xac0 <__pack_f>
     972:	28 96       	adiw	r28, 0x08	; 8
     974:	e9 e0       	ldi	r30, 0x09	; 9
     976:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x12>

0000097a <__fixsfsi>:
     97a:	ac e0       	ldi	r26, 0x0C	; 12
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	e3 ec       	ldi	r30, 0xC3	; 195
     980:	f4 e0       	ldi	r31, 0x04	; 4
     982:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__prologue_saves__+0x20>
     986:	69 83       	std	Y+1, r22	; 0x01
     988:	7a 83       	std	Y+2, r23	; 0x02
     98a:	8b 83       	std	Y+3, r24	; 0x03
     98c:	9c 83       	std	Y+4, r25	; 0x04
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	be 01       	movw	r22, r28
     994:	6b 5f       	subi	r22, 0xFB	; 251
     996:	7f 4f       	sbci	r23, 0xFF	; 255
     998:	0e 94 35 06 	call	0xc6a	; 0xc6a <__unpack_f>
     99c:	8d 81       	ldd	r24, Y+5	; 0x05
     99e:	82 30       	cpi	r24, 0x02	; 2
     9a0:	61 f1       	breq	.+88     	; 0x9fa <__fixsfsi+0x80>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	50 f1       	brcs	.+84     	; 0x9fa <__fixsfsi+0x80>
     9a6:	84 30       	cpi	r24, 0x04	; 4
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <__fixsfsi+0x38>
     9aa:	8e 81       	ldd	r24, Y+6	; 0x06
     9ac:	88 23       	and	r24, r24
     9ae:	51 f1       	breq	.+84     	; 0xa04 <__fixsfsi+0x8a>
     9b0:	2e c0       	rjmp	.+92     	; 0xa0e <__fixsfsi+0x94>
     9b2:	2f 81       	ldd	r18, Y+7	; 0x07
     9b4:	38 85       	ldd	r19, Y+8	; 0x08
     9b6:	37 fd       	sbrc	r19, 7
     9b8:	20 c0       	rjmp	.+64     	; 0x9fa <__fixsfsi+0x80>
     9ba:	6e 81       	ldd	r22, Y+6	; 0x06
     9bc:	2f 31       	cpi	r18, 0x1F	; 31
     9be:	31 05       	cpc	r19, r1
     9c0:	1c f0       	brlt	.+6      	; 0x9c8 <__fixsfsi+0x4e>
     9c2:	66 23       	and	r22, r22
     9c4:	f9 f0       	breq	.+62     	; 0xa04 <__fixsfsi+0x8a>
     9c6:	23 c0       	rjmp	.+70     	; 0xa0e <__fixsfsi+0x94>
     9c8:	8e e1       	ldi	r24, 0x1E	; 30
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	82 1b       	sub	r24, r18
     9ce:	93 0b       	sbc	r25, r19
     9d0:	29 85       	ldd	r18, Y+9	; 0x09
     9d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9d4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9d6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__fixsfsi+0x68>
     9da:	56 95       	lsr	r21
     9dc:	47 95       	ror	r20
     9de:	37 95       	ror	r19
     9e0:	27 95       	ror	r18
     9e2:	8a 95       	dec	r24
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <__fixsfsi+0x60>
     9e6:	66 23       	and	r22, r22
     9e8:	b1 f0       	breq	.+44     	; 0xa16 <__fixsfsi+0x9c>
     9ea:	50 95       	com	r21
     9ec:	40 95       	com	r20
     9ee:	30 95       	com	r19
     9f0:	21 95       	neg	r18
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	4f 4f       	sbci	r20, 0xFF	; 255
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	0e c0       	rjmp	.+28     	; 0xa16 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	09 c0       	rjmp	.+18     	; 0xa16 <__fixsfsi+0x9c>
     a04:	2f ef       	ldi	r18, 0xFF	; 255
     a06:	3f ef       	ldi	r19, 0xFF	; 255
     a08:	4f ef       	ldi	r20, 0xFF	; 255
     a0a:	5f e7       	ldi	r21, 0x7F	; 127
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__fixsfsi+0x9c>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e8       	ldi	r21, 0x80	; 128
     a16:	b9 01       	movw	r22, r18
     a18:	ca 01       	movw	r24, r20
     a1a:	2c 96       	adiw	r28, 0x0c	; 12
     a1c:	e2 e0       	ldi	r30, 0x02	; 2
     a1e:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__epilogue_restores__+0x20>

00000a22 <__clzsi2>:
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	7b 01       	movw	r14, r22
     a2c:	8c 01       	movw	r16, r24
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	e8 16       	cp	r14, r24
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	f8 06       	cpc	r15, r24
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	08 07       	cpc	r16, r24
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	18 07       	cpc	r17, r24
     a3e:	88 f4       	brcc	.+34     	; 0xa62 <__clzsi2+0x40>
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	e8 16       	cp	r14, r24
     a44:	f1 04       	cpc	r15, r1
     a46:	01 05       	cpc	r16, r1
     a48:	11 05       	cpc	r17, r1
     a4a:	31 f0       	breq	.+12     	; 0xa58 <__clzsi2+0x36>
     a4c:	28 f0       	brcs	.+10     	; 0xa58 <__clzsi2+0x36>
     a4e:	88 e0       	ldi	r24, 0x08	; 8
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	17 c0       	rjmp	.+46     	; 0xa86 <__clzsi2+0x64>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__clzsi2+0x64>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	e8 16       	cp	r14, r24
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	f8 06       	cpc	r15, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	08 07       	cpc	r16, r24
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	18 07       	cpc	r17, r24
     a72:	28 f0       	brcs	.+10     	; 0xa7e <__clzsi2+0x5c>
     a74:	88 e1       	ldi	r24, 0x18	; 24
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__clzsi2+0x64>
     a7e:	80 e1       	ldi	r24, 0x10	; 16
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	20 e2       	ldi	r18, 0x20	; 32
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	28 1b       	sub	r18, r24
     a90:	39 0b       	sbc	r19, r25
     a92:	4a 0b       	sbc	r20, r26
     a94:	5b 0b       	sbc	r21, r27
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__clzsi2+0x7e>
     a98:	16 95       	lsr	r17
     a9a:	07 95       	ror	r16
     a9c:	f7 94       	ror	r15
     a9e:	e7 94       	ror	r14
     aa0:	8a 95       	dec	r24
     aa2:	d2 f7       	brpl	.-12     	; 0xa98 <__clzsi2+0x76>
     aa4:	f7 01       	movw	r30, r14
     aa6:	e8 5f       	subi	r30, 0xF8	; 248
     aa8:	fe 4f       	sbci	r31, 0xFE	; 254
     aaa:	80 81       	ld	r24, Z
     aac:	28 1b       	sub	r18, r24
     aae:	31 09       	sbc	r19, r1
     ab0:	41 09       	sbc	r20, r1
     ab2:	51 09       	sbc	r21, r1
     ab4:	c9 01       	movw	r24, r18
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	08 95       	ret

00000ac0 <__pack_f>:
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	fc 01       	movw	r30, r24
     acc:	e4 80       	ldd	r14, Z+4	; 0x04
     ace:	f5 80       	ldd	r15, Z+5	; 0x05
     ad0:	06 81       	ldd	r16, Z+6	; 0x06
     ad2:	17 81       	ldd	r17, Z+7	; 0x07
     ad4:	d1 80       	ldd	r13, Z+1	; 0x01
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	48 f4       	brcc	.+18     	; 0xaee <__pack_f+0x2e>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e1       	ldi	r26, 0x10	; 16
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e8 2a       	or	r14, r24
     ae6:	f9 2a       	or	r15, r25
     ae8:	0a 2b       	or	r16, r26
     aea:	1b 2b       	or	r17, r27
     aec:	a5 c0       	rjmp	.+330    	; 0xc38 <__pack_f+0x178>
     aee:	84 30       	cpi	r24, 0x04	; 4
     af0:	09 f4       	brne	.+2      	; 0xaf4 <__pack_f+0x34>
     af2:	9f c0       	rjmp	.+318    	; 0xc32 <__pack_f+0x172>
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	21 f4       	brne	.+8      	; 0xb00 <__pack_f+0x40>
     af8:	ee 24       	eor	r14, r14
     afa:	ff 24       	eor	r15, r15
     afc:	87 01       	movw	r16, r14
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <__pack_f+0x4a>
     b00:	e1 14       	cp	r14, r1
     b02:	f1 04       	cpc	r15, r1
     b04:	01 05       	cpc	r16, r1
     b06:	11 05       	cpc	r17, r1
     b08:	19 f4       	brne	.+6      	; 0xb10 <__pack_f+0x50>
     b0a:	e0 e0       	ldi	r30, 0x00	; 0
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	96 c0       	rjmp	.+300    	; 0xc3c <__pack_f+0x17c>
     b10:	62 81       	ldd	r22, Z+2	; 0x02
     b12:	73 81       	ldd	r23, Z+3	; 0x03
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	62 38       	cpi	r22, 0x82	; 130
     b18:	79 07       	cpc	r23, r25
     b1a:	0c f0       	brlt	.+2      	; 0xb1e <__pack_f+0x5e>
     b1c:	5b c0       	rjmp	.+182    	; 0xbd4 <__pack_f+0x114>
     b1e:	22 e8       	ldi	r18, 0x82	; 130
     b20:	3f ef       	ldi	r19, 0xFF	; 255
     b22:	26 1b       	sub	r18, r22
     b24:	37 0b       	sbc	r19, r23
     b26:	2a 31       	cpi	r18, 0x1A	; 26
     b28:	31 05       	cpc	r19, r1
     b2a:	2c f0       	brlt	.+10     	; 0xb36 <__pack_f+0x76>
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	2a c0       	rjmp	.+84     	; 0xb8a <__pack_f+0xca>
     b36:	b8 01       	movw	r22, r16
     b38:	a7 01       	movw	r20, r14
     b3a:	02 2e       	mov	r0, r18
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <__pack_f+0x86>
     b3e:	76 95       	lsr	r23
     b40:	67 95       	ror	r22
     b42:	57 95       	ror	r21
     b44:	47 95       	ror	r20
     b46:	0a 94       	dec	r0
     b48:	d2 f7       	brpl	.-12     	; 0xb3e <__pack_f+0x7e>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__pack_f+0x9c>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	aa 1f       	adc	r26, r26
     b5a:	bb 1f       	adc	r27, r27
     b5c:	2a 95       	dec	r18
     b5e:	d2 f7       	brpl	.-12     	; 0xb54 <__pack_f+0x94>
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	a1 09       	sbc	r26, r1
     b64:	b1 09       	sbc	r27, r1
     b66:	8e 21       	and	r24, r14
     b68:	9f 21       	and	r25, r15
     b6a:	a0 23       	and	r26, r16
     b6c:	b1 23       	and	r27, r17
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	a1 05       	cpc	r26, r1
     b72:	b1 05       	cpc	r27, r1
     b74:	21 f0       	breq	.+8      	; 0xb7e <__pack_f+0xbe>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	9a 01       	movw	r18, r20
     b80:	ab 01       	movw	r20, r22
     b82:	28 2b       	or	r18, r24
     b84:	39 2b       	or	r19, r25
     b86:	4a 2b       	or	r20, r26
     b88:	5b 2b       	or	r21, r27
     b8a:	da 01       	movw	r26, r20
     b8c:	c9 01       	movw	r24, r18
     b8e:	8f 77       	andi	r24, 0x7F	; 127
     b90:	90 70       	andi	r25, 0x00	; 0
     b92:	a0 70       	andi	r26, 0x00	; 0
     b94:	b0 70       	andi	r27, 0x00	; 0
     b96:	80 34       	cpi	r24, 0x40	; 64
     b98:	91 05       	cpc	r25, r1
     b9a:	a1 05       	cpc	r26, r1
     b9c:	b1 05       	cpc	r27, r1
     b9e:	39 f4       	brne	.+14     	; 0xbae <__pack_f+0xee>
     ba0:	27 ff       	sbrs	r18, 7
     ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <__pack_f+0xf6>
     ba4:	20 5c       	subi	r18, 0xC0	; 192
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
     ba8:	4f 4f       	sbci	r20, 0xFF	; 255
     baa:	5f 4f       	sbci	r21, 0xFF	; 255
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <__pack_f+0xf6>
     bae:	21 5c       	subi	r18, 0xC1	; 193
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	4f 4f       	sbci	r20, 0xFF	; 255
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	e0 e0       	ldi	r30, 0x00	; 0
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	20 30       	cpi	r18, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	3a 07       	cpc	r19, r26
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	4a 07       	cpc	r20, r26
     bc4:	a0 e4       	ldi	r26, 0x40	; 64
     bc6:	5a 07       	cpc	r21, r26
     bc8:	10 f0       	brcs	.+4      	; 0xbce <__pack_f+0x10e>
     bca:	e1 e0       	ldi	r30, 0x01	; 1
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	79 01       	movw	r14, r18
     bd0:	8a 01       	movw	r16, r20
     bd2:	27 c0       	rjmp	.+78     	; 0xc22 <__pack_f+0x162>
     bd4:	60 38       	cpi	r22, 0x80	; 128
     bd6:	71 05       	cpc	r23, r1
     bd8:	64 f5       	brge	.+88     	; 0xc32 <__pack_f+0x172>
     bda:	fb 01       	movw	r30, r22
     bdc:	e1 58       	subi	r30, 0x81	; 129
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	d8 01       	movw	r26, r16
     be2:	c7 01       	movw	r24, r14
     be4:	8f 77       	andi	r24, 0x7F	; 127
     be6:	90 70       	andi	r25, 0x00	; 0
     be8:	a0 70       	andi	r26, 0x00	; 0
     bea:	b0 70       	andi	r27, 0x00	; 0
     bec:	80 34       	cpi	r24, 0x40	; 64
     bee:	91 05       	cpc	r25, r1
     bf0:	a1 05       	cpc	r26, r1
     bf2:	b1 05       	cpc	r27, r1
     bf4:	39 f4       	brne	.+14     	; 0xc04 <__pack_f+0x144>
     bf6:	e7 fe       	sbrs	r14, 7
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__pack_f+0x154>
     bfa:	80 e4       	ldi	r24, 0x40	; 64
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	04 c0       	rjmp	.+8      	; 0xc0c <__pack_f+0x14c>
     c04:	8f e3       	ldi	r24, 0x3F	; 63
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e8 0e       	add	r14, r24
     c0e:	f9 1e       	adc	r15, r25
     c10:	0a 1f       	adc	r16, r26
     c12:	1b 1f       	adc	r17, r27
     c14:	17 ff       	sbrs	r17, 7
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <__pack_f+0x162>
     c18:	16 95       	lsr	r17
     c1a:	07 95       	ror	r16
     c1c:	f7 94       	ror	r15
     c1e:	e7 94       	ror	r14
     c20:	31 96       	adiw	r30, 0x01	; 1
     c22:	87 e0       	ldi	r24, 0x07	; 7
     c24:	16 95       	lsr	r17
     c26:	07 95       	ror	r16
     c28:	f7 94       	ror	r15
     c2a:	e7 94       	ror	r14
     c2c:	8a 95       	dec	r24
     c2e:	d1 f7       	brne	.-12     	; 0xc24 <__pack_f+0x164>
     c30:	05 c0       	rjmp	.+10     	; 0xc3c <__pack_f+0x17c>
     c32:	ee 24       	eor	r14, r14
     c34:	ff 24       	eor	r15, r15
     c36:	87 01       	movw	r16, r14
     c38:	ef ef       	ldi	r30, 0xFF	; 255
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	6e 2f       	mov	r22, r30
     c3e:	67 95       	ror	r22
     c40:	66 27       	eor	r22, r22
     c42:	67 95       	ror	r22
     c44:	90 2f       	mov	r25, r16
     c46:	9f 77       	andi	r25, 0x7F	; 127
     c48:	d7 94       	ror	r13
     c4a:	dd 24       	eor	r13, r13
     c4c:	d7 94       	ror	r13
     c4e:	8e 2f       	mov	r24, r30
     c50:	86 95       	lsr	r24
     c52:	49 2f       	mov	r20, r25
     c54:	46 2b       	or	r20, r22
     c56:	58 2f       	mov	r21, r24
     c58:	5d 29       	or	r21, r13
     c5a:	b7 01       	movw	r22, r14
     c5c:	ca 01       	movw	r24, r20
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	08 95       	ret

00000c6a <__unpack_f>:
     c6a:	fc 01       	movw	r30, r24
     c6c:	db 01       	movw	r26, r22
     c6e:	40 81       	ld	r20, Z
     c70:	51 81       	ldd	r21, Z+1	; 0x01
     c72:	22 81       	ldd	r18, Z+2	; 0x02
     c74:	62 2f       	mov	r22, r18
     c76:	6f 77       	andi	r22, 0x7F	; 127
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	22 1f       	adc	r18, r18
     c7c:	22 27       	eor	r18, r18
     c7e:	22 1f       	adc	r18, r18
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	89 2f       	mov	r24, r25
     c84:	88 0f       	add	r24, r24
     c86:	82 2b       	or	r24, r18
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	99 1f       	adc	r25, r25
     c8e:	99 27       	eor	r25, r25
     c90:	99 1f       	adc	r25, r25
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	9c 93       	st	X, r25
     c96:	11 97       	sbiw	r26, 0x01	; 1
     c98:	21 15       	cp	r18, r1
     c9a:	31 05       	cpc	r19, r1
     c9c:	a9 f5       	brne	.+106    	; 0xd08 <__unpack_f+0x9e>
     c9e:	41 15       	cp	r20, r1
     ca0:	51 05       	cpc	r21, r1
     ca2:	61 05       	cpc	r22, r1
     ca4:	71 05       	cpc	r23, r1
     ca6:	11 f4       	brne	.+4      	; 0xcac <__unpack_f+0x42>
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	37 c0       	rjmp	.+110    	; 0xd1a <__unpack_f+0xb0>
     cac:	82 e8       	ldi	r24, 0x82	; 130
     cae:	9f ef       	ldi	r25, 0xFF	; 255
     cb0:	13 96       	adiw	r26, 0x03	; 3
     cb2:	9c 93       	st	X, r25
     cb4:	8e 93       	st	-X, r24
     cb6:	12 97       	sbiw	r26, 0x02	; 2
     cb8:	9a 01       	movw	r18, r20
     cba:	ab 01       	movw	r20, r22
     cbc:	67 e0       	ldi	r22, 0x07	; 7
     cbe:	22 0f       	add	r18, r18
     cc0:	33 1f       	adc	r19, r19
     cc2:	44 1f       	adc	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	6a 95       	dec	r22
     cc8:	d1 f7       	brne	.-12     	; 0xcbe <__unpack_f+0x54>
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	8c 93       	st	X, r24
     cce:	0d c0       	rjmp	.+26     	; 0xcea <__unpack_f+0x80>
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	8d 91       	ld	r24, X+
     cdc:	9c 91       	ld	r25, X
     cde:	13 97       	sbiw	r26, 0x03	; 3
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	13 96       	adiw	r26, 0x03	; 3
     ce4:	9c 93       	st	X, r25
     ce6:	8e 93       	st	-X, r24
     ce8:	12 97       	sbiw	r26, 0x02	; 2
     cea:	20 30       	cpi	r18, 0x00	; 0
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	38 07       	cpc	r19, r24
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	48 07       	cpc	r20, r24
     cf4:	80 e4       	ldi	r24, 0x40	; 64
     cf6:	58 07       	cpc	r21, r24
     cf8:	58 f3       	brcs	.-42     	; 0xcd0 <__unpack_f+0x66>
     cfa:	14 96       	adiw	r26, 0x04	; 4
     cfc:	2d 93       	st	X+, r18
     cfe:	3d 93       	st	X+, r19
     d00:	4d 93       	st	X+, r20
     d02:	5c 93       	st	X, r21
     d04:	17 97       	sbiw	r26, 0x07	; 7
     d06:	08 95       	ret
     d08:	2f 3f       	cpi	r18, 0xFF	; 255
     d0a:	31 05       	cpc	r19, r1
     d0c:	79 f4       	brne	.+30     	; 0xd2c <__unpack_f+0xc2>
     d0e:	41 15       	cp	r20, r1
     d10:	51 05       	cpc	r21, r1
     d12:	61 05       	cpc	r22, r1
     d14:	71 05       	cpc	r23, r1
     d16:	19 f4       	brne	.+6      	; 0xd1e <__unpack_f+0xb4>
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	8c 93       	st	X, r24
     d1c:	08 95       	ret
     d1e:	64 ff       	sbrs	r22, 4
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <__unpack_f+0xbe>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	8c 93       	st	X, r24
     d26:	12 c0       	rjmp	.+36     	; 0xd4c <__unpack_f+0xe2>
     d28:	1c 92       	st	X, r1
     d2a:	10 c0       	rjmp	.+32     	; 0xd4c <__unpack_f+0xe2>
     d2c:	2f 57       	subi	r18, 0x7F	; 127
     d2e:	30 40       	sbci	r19, 0x00	; 0
     d30:	13 96       	adiw	r26, 0x03	; 3
     d32:	3c 93       	st	X, r19
     d34:	2e 93       	st	-X, r18
     d36:	12 97       	sbiw	r26, 0x02	; 2
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	8c 93       	st	X, r24
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	44 0f       	add	r20, r20
     d40:	55 1f       	adc	r21, r21
     d42:	66 1f       	adc	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	8a 95       	dec	r24
     d48:	d1 f7       	brne	.-12     	; 0xd3e <__unpack_f+0xd4>
     d4a:	70 64       	ori	r23, 0x40	; 64
     d4c:	14 96       	adiw	r26, 0x04	; 4
     d4e:	4d 93       	st	X+, r20
     d50:	5d 93       	st	X+, r21
     d52:	6d 93       	st	X+, r22
     d54:	7c 93       	st	X, r23
     d56:	17 97       	sbiw	r26, 0x07	; 7
     d58:	08 95       	ret

00000d5a <__fpcmp_parts_f>:
     d5a:	1f 93       	push	r17
     d5c:	dc 01       	movw	r26, r24
     d5e:	fb 01       	movw	r30, r22
     d60:	9c 91       	ld	r25, X
     d62:	92 30       	cpi	r25, 0x02	; 2
     d64:	08 f4       	brcc	.+2      	; 0xd68 <__fpcmp_parts_f+0xe>
     d66:	47 c0       	rjmp	.+142    	; 0xdf6 <__fpcmp_parts_f+0x9c>
     d68:	80 81       	ld	r24, Z
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	08 f4       	brcc	.+2      	; 0xd70 <__fpcmp_parts_f+0x16>
     d6e:	43 c0       	rjmp	.+134    	; 0xdf6 <__fpcmp_parts_f+0x9c>
     d70:	94 30       	cpi	r25, 0x04	; 4
     d72:	51 f4       	brne	.+20     	; 0xd88 <__fpcmp_parts_f+0x2e>
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	1c 91       	ld	r17, X
     d78:	84 30       	cpi	r24, 0x04	; 4
     d7a:	99 f5       	brne	.+102    	; 0xde2 <__fpcmp_parts_f+0x88>
     d7c:	81 81       	ldd	r24, Z+1	; 0x01
     d7e:	68 2f       	mov	r22, r24
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	61 1b       	sub	r22, r17
     d84:	71 09       	sbc	r23, r1
     d86:	3f c0       	rjmp	.+126    	; 0xe06 <__fpcmp_parts_f+0xac>
     d88:	84 30       	cpi	r24, 0x04	; 4
     d8a:	21 f0       	breq	.+8      	; 0xd94 <__fpcmp_parts_f+0x3a>
     d8c:	92 30       	cpi	r25, 0x02	; 2
     d8e:	31 f4       	brne	.+12     	; 0xd9c <__fpcmp_parts_f+0x42>
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	b9 f1       	breq	.+110    	; 0xe02 <__fpcmp_parts_f+0xa8>
     d94:	81 81       	ldd	r24, Z+1	; 0x01
     d96:	88 23       	and	r24, r24
     d98:	89 f1       	breq	.+98     	; 0xdfc <__fpcmp_parts_f+0xa2>
     d9a:	2d c0       	rjmp	.+90     	; 0xdf6 <__fpcmp_parts_f+0x9c>
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	1c 91       	ld	r17, X
     da0:	11 97       	sbiw	r26, 0x01	; 1
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	f1 f0       	breq	.+60     	; 0xde2 <__fpcmp_parts_f+0x88>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	18 17       	cp	r17, r24
     daa:	d9 f4       	brne	.+54     	; 0xde2 <__fpcmp_parts_f+0x88>
     dac:	12 96       	adiw	r26, 0x02	; 2
     dae:	2d 91       	ld	r18, X+
     db0:	3c 91       	ld	r19, X
     db2:	13 97       	sbiw	r26, 0x03	; 3
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	82 17       	cp	r24, r18
     dba:	93 07       	cpc	r25, r19
     dbc:	94 f0       	brlt	.+36     	; 0xde2 <__fpcmp_parts_f+0x88>
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	bc f0       	brlt	.+46     	; 0xdf2 <__fpcmp_parts_f+0x98>
     dc4:	14 96       	adiw	r26, 0x04	; 4
     dc6:	8d 91       	ld	r24, X+
     dc8:	9d 91       	ld	r25, X+
     dca:	0d 90       	ld	r0, X+
     dcc:	bc 91       	ld	r27, X
     dce:	a0 2d       	mov	r26, r0
     dd0:	24 81       	ldd	r18, Z+4	; 0x04
     dd2:	35 81       	ldd	r19, Z+5	; 0x05
     dd4:	46 81       	ldd	r20, Z+6	; 0x06
     dd6:	57 81       	ldd	r21, Z+7	; 0x07
     dd8:	28 17       	cp	r18, r24
     dda:	39 07       	cpc	r19, r25
     ddc:	4a 07       	cpc	r20, r26
     dde:	5b 07       	cpc	r21, r27
     de0:	18 f4       	brcc	.+6      	; 0xde8 <__fpcmp_parts_f+0x8e>
     de2:	11 23       	and	r17, r17
     de4:	41 f0       	breq	.+16     	; 0xdf6 <__fpcmp_parts_f+0x9c>
     de6:	0a c0       	rjmp	.+20     	; 0xdfc <__fpcmp_parts_f+0xa2>
     de8:	82 17       	cp	r24, r18
     dea:	93 07       	cpc	r25, r19
     dec:	a4 07       	cpc	r26, r20
     dee:	b5 07       	cpc	r27, r21
     df0:	40 f4       	brcc	.+16     	; 0xe02 <__fpcmp_parts_f+0xa8>
     df2:	11 23       	and	r17, r17
     df4:	19 f0       	breq	.+6      	; 0xdfc <__fpcmp_parts_f+0xa2>
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <__fpcmp_parts_f+0xac>
     dfc:	6f ef       	ldi	r22, 0xFF	; 255
     dfe:	7f ef       	ldi	r23, 0xFF	; 255
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <__fpcmp_parts_f+0xac>
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	cb 01       	movw	r24, r22
     e08:	1f 91       	pop	r17
     e0a:	08 95       	ret

00000e0c <DIO_u8SetPinDirection>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"DIO_Private.h"
#include"DIO_Interface.h"
u8 DIO_u8SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8Direction)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <DIO_u8SetPinDirection+0x6>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <DIO_u8SetPinDirection+0x8>
     e14:	00 d0       	rcall	.+0      	; 0xe16 <DIO_u8SetPinDirection+0xa>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8a 83       	std	Y+2, r24	; 0x02
     e1c:	6b 83       	std	Y+3, r22	; 0x03
     e1e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State=OK;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinNumber<8)
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 30       	cpi	r24, 0x08	; 8
     e28:	08 f0       	brcs	.+2      	; 0xe2c <DIO_u8SetPinDirection+0x20>
     e2a:	d4 c0       	rjmp	.+424    	; 0xfd4 <DIO_u8SetPinDirection+0x1c8>
	{
		switch(Copy_u8PortNumber)
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3e 83       	std	Y+6, r19	; 0x06
     e34:	2d 83       	std	Y+5, r18	; 0x05
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	9e 81       	ldd	r25, Y+6	; 0x06
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	91 05       	cpc	r25, r1
     e3e:	a9 f1       	breq	.+106    	; 0xeaa <DIO_u8SetPinDirection+0x9e>
     e40:	2d 81       	ldd	r18, Y+5	; 0x05
     e42:	3e 81       	ldd	r19, Y+6	; 0x06
     e44:	22 30       	cpi	r18, 0x02	; 2
     e46:	31 05       	cpc	r19, r1
     e48:	2c f4       	brge	.+10     	; 0xe54 <DIO_u8SetPinDirection+0x48>
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	71 f0       	breq	.+28     	; 0xe6e <DIO_u8SetPinDirection+0x62>
     e52:	be c0       	rjmp	.+380    	; 0xfd0 <DIO_u8SetPinDirection+0x1c4>
     e54:	2d 81       	ldd	r18, Y+5	; 0x05
     e56:	3e 81       	ldd	r19, Y+6	; 0x06
     e58:	22 30       	cpi	r18, 0x02	; 2
     e5a:	31 05       	cpc	r19, r1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <DIO_u8SetPinDirection+0x54>
     e5e:	56 c0       	rjmp	.+172    	; 0xf0c <DIO_u8SetPinDirection+0x100>
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	91 05       	cpc	r25, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <DIO_u8SetPinDirection+0x60>
     e6a:	81 c0       	rjmp	.+258    	; 0xf6e <DIO_u8SetPinDirection+0x162>
     e6c:	b1 c0       	rjmp	.+354    	; 0xfd0 <DIO_u8SetPinDirection+0x1c4>
		{
		case DIO_PORTA:
			if(Copy_u8Direction==PIN_OUTPUT)
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	09 f4       	brne	.+2      	; 0xe76 <DIO_u8SetPinDirection+0x6a>
     e74:	b0 c0       	rjmp	.+352    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			{
			}
			else if(Copy_u8Direction==PIN_INPUT)
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	88 23       	and	r24, r24
     e7a:	a9 f4       	brne	.+42     	; 0xea6 <DIO_u8SetPinDirection+0x9a>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
     e7c:	aa e3       	ldi	r26, 0x3A	; 58
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ea e3       	ldi	r30, 0x3A	; 58
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_u8SetPinDirection+0x8e>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_u8SetPinDirection+0x8a>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	98 c0       	rjmp	.+304    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			else
			{
				Error_State=NOK;
     ea6:	19 82       	std	Y+1, r1	; 0x01
     ea8:	96 c0       	rjmp	.+300    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			break;
		case DIO_PORTB:
			if(Copy_u8Direction==PIN_OUTPUT)
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	a1 f4       	brne	.+40     	; 0xed8 <DIO_u8SetPinDirection+0xcc>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
     eb0:	a7 e3       	ldi	r26, 0x37	; 55
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e3       	ldi	r30, 0x37	; 55
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_u8SetPinDirection+0xc2>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_u8SetPinDirection+0xbe>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	7f c0       	rjmp	.+254    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			else if(Copy_u8Direction==PIN_INPUT)
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	88 23       	and	r24, r24
     edc:	a9 f4       	brne	.+42     	; 0xf08 <DIO_u8SetPinDirection+0xfc>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
     ede:	a7 e3       	ldi	r26, 0x37	; 55
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e7 e3       	ldi	r30, 0x37	; 55
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_u8SetPinDirection+0xf0>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_u8SetPinDirection+0xec>
     f00:	80 95       	com	r24
     f02:	84 23       	and	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	67 c0       	rjmp	.+206    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			else
			{
				Error_State=NOK;
     f08:	19 82       	std	Y+1, r1	; 0x01
     f0a:	65 c0       	rjmp	.+202    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			break;
		case DIO_PORTC:
			if(Copy_u8Direction==PIN_OUTPUT)
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	a1 f4       	brne	.+40     	; 0xf3a <DIO_u8SetPinDirection+0x12e>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
     f12:	a4 e3       	ldi	r26, 0x34	; 52
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e4 e3       	ldi	r30, 0x34	; 52
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_u8SetPinDirection+0x124>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_u8SetPinDirection+0x120>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	4e c0       	rjmp	.+156    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			else if(Copy_u8Direction==PIN_INPUT)
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	88 23       	and	r24, r24
     f3e:	a9 f4       	brne	.+42     	; 0xf6a <DIO_u8SetPinDirection+0x15e>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
     f40:	a4 e3       	ldi	r26, 0x34	; 52
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e3       	ldi	r30, 0x34	; 52
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_u8SetPinDirection+0x152>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_u8SetPinDirection+0x14e>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	36 c0       	rjmp	.+108    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			else
			{
				Error_State=NOK;
     f6a:	19 82       	std	Y+1, r1	; 0x01
     f6c:	34 c0       	rjmp	.+104    	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			break;
		case DIO_PORTD:
			if(Copy_u8Direction==PIN_OUTPUT)
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	a1 f4       	brne	.+40     	; 0xf9c <DIO_u8SetPinDirection+0x190>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
     f74:	a1 e3       	ldi	r26, 0x31	; 49
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e1 e3       	ldi	r30, 0x31	; 49
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_u8SetPinDirection+0x186>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_u8SetPinDirection+0x182>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	1d c0       	rjmp	.+58     	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			else if(Copy_u8Direction==PIN_INPUT)
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	88 23       	and	r24, r24
     fa0:	a9 f4       	brne	.+42     	; 0xfcc <DIO_u8SetPinDirection+0x1c0>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
     fa2:	a1 e3       	ldi	r26, 0x31	; 49
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e1 e3       	ldi	r30, 0x31	; 49
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_u8SetPinDirection+0x1b4>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_u8SetPinDirection+0x1b0>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			else
			{
				Error_State=NOK;
     fcc:	19 82       	std	Y+1, r1	; 0x01
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			}
			break;
		default:
			Error_State=NOK;
     fd0:	19 82       	std	Y+1, r1	; 0x01
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <DIO_u8SetPinDirection+0x1ca>
			break;
		}
	}
	else
	{
		Error_State=NOK;
     fd4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	26 96       	adiw	r28, 0x06	; 6
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <DIO_u8SetPinValue+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <DIO_u8SetPinValue+0x8>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <DIO_u8SetPinValue+0xa>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	8a 83       	std	Y+2, r24	; 0x02
     ffa:	6b 83       	std	Y+3, r22	; 0x03
     ffc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State=OK;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinNumber<8)
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	88 30       	cpi	r24, 0x08	; 8
    1006:	08 f0       	brcs	.+2      	; 0x100a <DIO_u8SetPinValue+0x20>
    1008:	e8 c0       	rjmp	.+464    	; 0x11da <DIO_u8SetPinValue+0x1f0>
	{
		switch(Copy_u8PortNumber)
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3e 83       	std	Y+6, r19	; 0x06
    1012:	2d 83       	std	Y+5, r18	; 0x05
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_u8SetPinValue+0x36>
    101e:	48 c0       	rjmp	.+144    	; 0x10b0 <DIO_u8SetPinValue+0xc6>
    1020:	2d 81       	ldd	r18, Y+5	; 0x05
    1022:	3e 81       	ldd	r19, Y+6	; 0x06
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	2c f4       	brge	.+10     	; 0x1034 <DIO_u8SetPinValue+0x4a>
    102a:	8d 81       	ldd	r24, Y+5	; 0x05
    102c:	9e 81       	ldd	r25, Y+6	; 0x06
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	71 f0       	breq	.+28     	; 0x104e <DIO_u8SetPinValue+0x64>
    1032:	d1 c0       	rjmp	.+418    	; 0x11d6 <DIO_u8SetPinValue+0x1ec>
    1034:	2d 81       	ldd	r18, Y+5	; 0x05
    1036:	3e 81       	ldd	r19, Y+6	; 0x06
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <DIO_u8SetPinValue+0x56>
    103e:	69 c0       	rjmp	.+210    	; 0x1112 <DIO_u8SetPinValue+0x128>
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	9e 81       	ldd	r25, Y+6	; 0x06
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <DIO_u8SetPinValue+0x62>
    104a:	94 c0       	rjmp	.+296    	; 0x1174 <DIO_u8SetPinValue+0x18a>
    104c:	c4 c0       	rjmp	.+392    	; 0x11d6 <DIO_u8SetPinValue+0x1ec>
		{
		case DIO_PORTA:
			if(Copy_u8Value==HIGH)
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	a1 f4       	brne	.+40     	; 0x107c <DIO_u8SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    1054:	ab e3       	ldi	r26, 0x3B	; 59
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	eb e3       	ldi	r30, 0x3B	; 59
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_u8SetPinValue+0x88>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_u8SetPinValue+0x84>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	b0 c0       	rjmp	.+352    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8Value==LOW)
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	88 23       	and	r24, r24
    1080:	a9 f4       	brne	.+42     	; 0x10ac <DIO_u8SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    1082:	ab e3       	ldi	r26, 0x3B	; 59
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e3       	ldi	r30, 0x3B	; 59
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_u8SetPinValue+0xb6>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_u8SetPinValue+0xb2>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	98 c0       	rjmp	.+304    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State=NOK;
    10ac:	19 82       	std	Y+1, r1	; 0x01
    10ae:	96 c0       	rjmp	.+300    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTB:
			if(Copy_u8Value==HIGH)
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	a1 f4       	brne	.+40     	; 0x10de <DIO_u8SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    10b6:	a8 e3       	ldi	r26, 0x38	; 56
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e3       	ldi	r30, 0x38	; 56
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_u8SetPinValue+0xea>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_u8SetPinValue+0xe6>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	7f c0       	rjmp	.+254    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8Value==LOW)
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	88 23       	and	r24, r24
    10e2:	a9 f4       	brne	.+42     	; 0x110e <DIO_u8SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinValue+0x118>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinValue+0x114>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	67 c0       	rjmp	.+206    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State=NOK;
    110e:	19 82       	std	Y+1, r1	; 0x01
    1110:	65 c0       	rjmp	.+202    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTC:
			if(Copy_u8Value==HIGH)
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	a1 f4       	brne	.+40     	; 0x1140 <DIO_u8SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    1118:	a5 e3       	ldi	r26, 0x35	; 53
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e3       	ldi	r30, 0x35	; 53
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8SetPinValue+0x14c>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_u8SetPinValue+0x148>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	4e c0       	rjmp	.+156    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8Value==LOW)
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	88 23       	and	r24, r24
    1144:	a9 f4       	brne	.+42     	; 0x1170 <DIO_u8SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1146:	a5 e3       	ldi	r26, 0x35	; 53
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_u8SetPinValue+0x17a>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_u8SetPinValue+0x176>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	36 c0       	rjmp	.+108    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State=NOK;
    1170:	19 82       	std	Y+1, r1	; 0x01
    1172:	34 c0       	rjmp	.+104    	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTD:
			if(Copy_u8Value==HIGH)
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <DIO_u8SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    117a:	a2 e3       	ldi	r26, 0x32	; 50
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e2 e3       	ldi	r30, 0x32	; 50
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_u8SetPinValue+0x1ae>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_u8SetPinValue+0x1aa>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	1d c0       	rjmp	.+58     	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8Value==LOW)
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	88 23       	and	r24, r24
    11a6:	a9 f4       	brne	.+42     	; 0x11d2 <DIO_u8SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    11a8:	a2 e3       	ldi	r26, 0x32	; 50
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e2 e3       	ldi	r30, 0x32	; 50
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_u8SetPinValue+0x1dc>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_u8SetPinValue+0x1d8>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State=NOK;
    11d2:	19 82       	std	Y+1, r1	; 0x01
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			}
			break;
		default:
			Error_State=NOK;
    11d6:	19 82       	std	Y+1, r1	; 0x01
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <DIO_u8SetPinValue+0x1f2>
			break;
		}
	}
	else
	{
		Error_State=NOK;
    11da:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11de:	26 96       	adiw	r28, 0x06	; 6
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8Direction)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <DIO_u8SetPortDirection+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_u8SetPortDirection+0x8>
    11f8:	0f 92       	push	r0
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_State=OK;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	3d 83       	std	Y+5, r19	; 0x05
    120e:	2c 83       	std	Y+4, r18	; 0x04
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	91 05       	cpc	r25, r1
    1218:	31 f1       	breq	.+76     	; 0x1266 <DIO_u8SetPortDirection+0x76>
    121a:	2c 81       	ldd	r18, Y+4	; 0x04
    121c:	3d 81       	ldd	r19, Y+5	; 0x05
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	2c f4       	brge	.+10     	; 0x122e <DIO_u8SetPortDirection+0x3e>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	61 f0       	breq	.+24     	; 0x1244 <DIO_u8SetPortDirection+0x54>
    122c:	4f c0       	rjmp	.+158    	; 0x12cc <DIO_u8SetPortDirection+0xdc>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	41 f1       	breq	.+80     	; 0x1288 <DIO_u8SetPortDirection+0x98>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	91 05       	cpc	r25, r1
    1240:	a1 f1       	breq	.+104    	; 0x12aa <DIO_u8SetPortDirection+0xba>
    1242:	44 c0       	rjmp	.+136    	; 0x12cc <DIO_u8SetPortDirection+0xdc>
	{
	case DIO_PORTA:
		if(Copy_u8Direction==PORT_OUTPUT)
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	8f 3f       	cpi	r24, 0xFF	; 255
    1248:	29 f4       	brne	.+10     	; 0x1254 <DIO_u8SetPortDirection+0x64>
		{
			DDRA=PORT_OUTPUT;
    124a:	ea e3       	ldi	r30, 0x3A	; 58
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	80 83       	st	Z, r24
    1252:	3d c0       	rjmp	.+122    	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		else if(Copy_u8Direction==PORT_INPUT)
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 23       	and	r24, r24
    1258:	21 f4       	brne	.+8      	; 0x1262 <DIO_u8SetPortDirection+0x72>
		{
			DDRA=PORT_INPUT;
    125a:	ea e3       	ldi	r30, 0x3A	; 58
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	10 82       	st	Z, r1
    1260:	36 c0       	rjmp	.+108    	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		else
		{
			Error_State=NOK;
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	34 c0       	rjmp	.+104    	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8Direction==PORT_OUTPUT)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	8f 3f       	cpi	r24, 0xFF	; 255
    126a:	29 f4       	brne	.+10     	; 0x1276 <DIO_u8SetPortDirection+0x86>
		{
			DDRB=PORT_OUTPUT;
    126c:	e7 e3       	ldi	r30, 0x37	; 55
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	80 83       	st	Z, r24
    1274:	2c c0       	rjmp	.+88     	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		else if(Copy_u8Direction==PORT_INPUT)
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 23       	and	r24, r24
    127a:	21 f4       	brne	.+8      	; 0x1284 <DIO_u8SetPortDirection+0x94>
		{
			DDRB=PORT_INPUT;
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	10 82       	st	Z, r1
    1282:	25 c0       	rjmp	.+74     	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		else
		{
			Error_State=NOK;
    1284:	19 82       	std	Y+1, r1	; 0x01
    1286:	23 c0       	rjmp	.+70     	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8Direction==PORT_OUTPUT)
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	29 f4       	brne	.+10     	; 0x1298 <DIO_u8SetPortDirection+0xa8>
		{
			DDRC=PORT_OUTPUT;
    128e:	e4 e3       	ldi	r30, 0x34	; 52
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8f ef       	ldi	r24, 0xFF	; 255
    1294:	80 83       	st	Z, r24
    1296:	1b c0       	rjmp	.+54     	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		else if(Copy_u8Direction==PORT_INPUT)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 23       	and	r24, r24
    129c:	21 f4       	brne	.+8      	; 0x12a6 <DIO_u8SetPortDirection+0xb6>
		{
			DDRC=PORT_INPUT;
    129e:	e4 e3       	ldi	r30, 0x34	; 52
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	10 82       	st	Z, r1
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		else
		{
			Error_State=NOK;
    12a6:	19 82       	std	Y+1, r1	; 0x01
    12a8:	12 c0       	rjmp	.+36     	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8Direction==PORT_OUTPUT)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	8f 3f       	cpi	r24, 0xFF	; 255
    12ae:	29 f4       	brne	.+10     	; 0x12ba <DIO_u8SetPortDirection+0xca>
		{
			DDRD=PORT_OUTPUT;
    12b0:	e1 e3       	ldi	r30, 0x31	; 49
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	80 83       	st	Z, r24
    12b8:	0a c0       	rjmp	.+20     	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		else if(Copy_u8Direction==PORT_INPUT)
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	88 23       	and	r24, r24
    12be:	21 f4       	brne	.+8      	; 0x12c8 <DIO_u8SetPortDirection+0xd8>
		{
			DDRD=PORT_INPUT;
    12c0:	e1 e3       	ldi	r30, 0x31	; 49
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	10 82       	st	Z, r1
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		else
		{
			Error_State=NOK;
    12c8:	19 82       	std	Y+1, r1	; 0x01
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <DIO_u8SetPortDirection+0xde>
		}
		break;
	default:
		Error_State=NOK;
    12cc:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return Error_State;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <DIO_u8SetPortValue+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_u8SetPortValue+0x8>
    12e8:	0f 92       	push	r0
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_State=OK;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Value<=255)
	{
		switch(Copy_u8PortNumber)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3d 83       	std	Y+5, r19	; 0x05
    12fe:	2c 83       	std	Y+4, r18	; 0x04
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	91 05       	cpc	r25, r1
    1308:	d1 f0       	breq	.+52     	; 0x133e <DIO_u8SetPortValue+0x5e>
    130a:	2c 81       	ldd	r18, Y+4	; 0x04
    130c:	3d 81       	ldd	r19, Y+5	; 0x05
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	2c f4       	brge	.+10     	; 0x131e <DIO_u8SetPortValue+0x3e>
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	61 f0       	breq	.+24     	; 0x1334 <DIO_u8SetPortValue+0x54>
    131c:	1f c0       	rjmp	.+62     	; 0x135c <DIO_u8SetPortValue+0x7c>
    131e:	2c 81       	ldd	r18, Y+4	; 0x04
    1320:	3d 81       	ldd	r19, Y+5	; 0x05
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	81 f0       	breq	.+32     	; 0x1348 <DIO_u8SetPortValue+0x68>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	91 05       	cpc	r25, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_u8SetPortValue+0x72>
    1332:	14 c0       	rjmp	.+40     	; 0x135c <DIO_u8SetPortValue+0x7c>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	80 83       	st	Z, r24
    133c:	10 c0       	rjmp	.+32     	; 0x135e <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
    133e:	e8 e3       	ldi	r30, 0x38	; 56
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	80 83       	st	Z, r24
    1346:	0b c0       	rjmp	.+22     	; 0x135e <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
    1348:	e5 e3       	ldi	r30, 0x35	; 53
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	80 83       	st	Z, r24
    1350:	06 c0       	rjmp	.+12     	; 0x135e <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
    1352:	e2 e3       	ldi	r30, 0x32	; 50
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24
    135a:	01 c0       	rjmp	.+2      	; 0x135e <DIO_u8SetPortValue+0x7e>
			break;
		default:
			Error_State=NOK;
    135c:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{
		Error_State=NOK;
	}
	return Error_State ;
    135e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* u8PtrToValue)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	27 97       	sbiw	r28, 0x07	; 7
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	6b 83       	std	Y+3, r22	; 0x03
    1388:	5d 83       	std	Y+5, r21	; 0x05
    138a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State=OK;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber<8)&&(u8PtrToValue!=NULL_POINTER))
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	88 30       	cpi	r24, 0x08	; 8
    1394:	08 f0       	brcs	.+2      	; 0x1398 <DIO_u8GetPinValue+0x28>
    1396:	78 c0       	rjmp	.+240    	; 0x1488 <DIO_u8GetPinValue+0x118>
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	82 30       	cpi	r24, 0x02	; 2
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <DIO_u8GetPinValue+0x34>
    13a2:	72 c0       	rjmp	.+228    	; 0x1488 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8PortNumber)
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3f 83       	std	Y+7, r19	; 0x07
    13ac:	2e 83       	std	Y+6, r18	; 0x06
    13ae:	4e 81       	ldd	r20, Y+6	; 0x06
    13b0:	5f 81       	ldd	r21, Y+7	; 0x07
    13b2:	41 30       	cpi	r20, 0x01	; 1
    13b4:	51 05       	cpc	r21, r1
    13b6:	59 f1       	breq	.+86     	; 0x140e <DIO_u8GetPinValue+0x9e>
    13b8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ba:	9f 81       	ldd	r25, Y+7	; 0x07
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	91 05       	cpc	r25, r1
    13c0:	34 f4       	brge	.+12     	; 0x13ce <DIO_u8GetPinValue+0x5e>
    13c2:	2e 81       	ldd	r18, Y+6	; 0x06
    13c4:	3f 81       	ldd	r19, Y+7	; 0x07
    13c6:	21 15       	cp	r18, r1
    13c8:	31 05       	cpc	r19, r1
    13ca:	69 f0       	breq	.+26     	; 0x13e6 <DIO_u8GetPinValue+0x76>
    13cc:	5c c0       	rjmp	.+184    	; 0x1486 <DIO_u8GetPinValue+0x116>
    13ce:	4e 81       	ldd	r20, Y+6	; 0x06
    13d0:	5f 81       	ldd	r21, Y+7	; 0x07
    13d2:	42 30       	cpi	r20, 0x02	; 2
    13d4:	51 05       	cpc	r21, r1
    13d6:	79 f1       	breq	.+94     	; 0x1436 <DIO_u8GetPinValue+0xc6>
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_u8GetPinValue+0x74>
    13e2:	3d c0       	rjmp	.+122    	; 0x145e <DIO_u8GetPinValue+0xee>
    13e4:	50 c0       	rjmp	.+160    	; 0x1486 <DIO_u8GetPinValue+0x116>
		{
		case DIO_PORTA:
			*u8PtrToValue=GET_BIT(PINA,Copy_u8PinNumber);
    13e6:	e9 e3       	ldi	r30, 0x39	; 57
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_u8GetPinValue+0x8e>
    13fa:	55 95       	asr	r21
    13fc:	47 95       	ror	r20
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_u8GetPinValue+0x8a>
    1402:	ca 01       	movw	r24, r20
    1404:	81 70       	andi	r24, 0x01	; 1
    1406:	ec 81       	ldd	r30, Y+4	; 0x04
    1408:	fd 81       	ldd	r31, Y+5	; 0x05
    140a:	80 83       	st	Z, r24
    140c:	3d c0       	rjmp	.+122    	; 0x1488 <DIO_u8GetPinValue+0x118>
			break;
		case DIO_PORTB:
			*u8PtrToValue=GET_BIT(PINB,Copy_u8PinNumber);
    140e:	e6 e3       	ldi	r30, 0x36	; 54
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a9 01       	movw	r20, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_u8GetPinValue+0xb6>
    1422:	55 95       	asr	r21
    1424:	47 95       	ror	r20
    1426:	8a 95       	dec	r24
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_u8GetPinValue+0xb2>
    142a:	ca 01       	movw	r24, r20
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	ec 81       	ldd	r30, Y+4	; 0x04
    1430:	fd 81       	ldd	r31, Y+5	; 0x05
    1432:	80 83       	st	Z, r24
    1434:	29 c0       	rjmp	.+82     	; 0x1488 <DIO_u8GetPinValue+0x118>
			break;
		case DIO_PORTC:
			*u8PtrToValue=GET_BIT(PINC,Copy_u8PinNumber);
    1436:	e3 e3       	ldi	r30, 0x33	; 51
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a9 01       	movw	r20, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_u8GetPinValue+0xde>
    144a:	55 95       	asr	r21
    144c:	47 95       	ror	r20
    144e:	8a 95       	dec	r24
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_u8GetPinValue+0xda>
    1452:	ca 01       	movw	r24, r20
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	ec 81       	ldd	r30, Y+4	; 0x04
    1458:	fd 81       	ldd	r31, Y+5	; 0x05
    145a:	80 83       	st	Z, r24
    145c:	15 c0       	rjmp	.+42     	; 0x1488 <DIO_u8GetPinValue+0x118>
			break;
		case DIO_PORTD:
			*u8PtrToValue=GET_BIT(PIND,Copy_u8PinNumber);
    145e:	e0 e3       	ldi	r30, 0x30	; 48
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	a9 01       	movw	r20, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_u8GetPinValue+0x106>
    1472:	55 95       	asr	r21
    1474:	47 95       	ror	r20
    1476:	8a 95       	dec	r24
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_u8GetPinValue+0x102>
    147a:	ca 01       	movw	r24, r20
    147c:	81 70       	andi	r24, 0x01	; 1
    147e:	ec 81       	ldd	r30, Y+4	; 0x04
    1480:	fd 81       	ldd	r31, Y+5	; 0x05
    1482:	80 83       	st	Z, r24
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <DIO_u8GetPinValue+0x118>
			break;
		default:
			Error_State=NOK;
    1486:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Error_State;
    1488:	89 81       	ldd	r24, Y+1	; 0x01
}
    148a:	27 96       	adiw	r28, 0x07	; 7
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <DIO_u8Set4PinsDirection>:
u8 DIO_u8Set4PinsDirection(u8 Copy_u8PortNumber,u8 Copy_u8PinMode,u8 Copy_u8Direction)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DIO_u8Set4PinsDirection+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <DIO_u8Set4PinsDirection+0x8>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <DIO_u8Set4PinsDirection+0xa>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	8a 83       	std	Y+2, r24	; 0x02
    14ac:	6b 83       	std	Y+3, r22	; 0x03
    14ae:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State=OK;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3e 83       	std	Y+6, r19	; 0x06
    14bc:	2d 83       	std	Y+5, r18	; 0x05
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <DIO_u8Set4PinsDirection+0x2e>
    14c8:	51 c0       	rjmp	.+162    	; 0x156c <DIO_u8Set4PinsDirection+0xd0>
    14ca:	2d 81       	ldd	r18, Y+5	; 0x05
    14cc:	3e 81       	ldd	r19, Y+6	; 0x06
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	2c f4       	brge	.+10     	; 0x14de <DIO_u8Set4PinsDirection+0x42>
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	71 f0       	breq	.+28     	; 0x14f8 <DIO_u8Set4PinsDirection+0x5c>
    14dc:	f5 c0       	rjmp	.+490    	; 0x16c8 <DIO_u8Set4PinsDirection+0x22c>
    14de:	2d 81       	ldd	r18, Y+5	; 0x05
    14e0:	3e 81       	ldd	r19, Y+6	; 0x06
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <DIO_u8Set4PinsDirection+0x4e>
    14e8:	7b c0       	rjmp	.+246    	; 0x15e0 <DIO_u8Set4PinsDirection+0x144>
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <DIO_u8Set4PinsDirection+0x5a>
    14f4:	af c0       	rjmp	.+350    	; 0x1654 <DIO_u8Set4PinsDirection+0x1b8>
    14f6:	e8 c0       	rjmp	.+464    	; 0x16c8 <DIO_u8Set4PinsDirection+0x22c>
	{
	case DIO_PORTA:
		if((Copy_u8PinMode==MSB_PINS)&&(Copy_u8Direction==PIN_OUTPUT))
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	59 f4       	brne	.+22     	; 0x1514 <DIO_u8Set4PinsDirection+0x78>
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	41 f4       	brne	.+16     	; 0x1514 <DIO_u8Set4PinsDirection+0x78>
		{
			DDRA|=0xF0;
    1504:	aa e3       	ldi	r26, 0x3A	; 58
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ea e3       	ldi	r30, 0x3A	; 58
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 6f       	ori	r24, 0xF0	; 240
    1510:	8c 93       	st	X, r24
    1512:	db c0       	rjmp	.+438    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==MSB_PINS)&&(Copy_u8Direction==PIN_INPUT))
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	59 f4       	brne	.+22     	; 0x1530 <DIO_u8Set4PinsDirection+0x94>
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	88 23       	and	r24, r24
    151e:	41 f4       	brne	.+16     	; 0x1530 <DIO_u8Set4PinsDirection+0x94>
		{
			DDRA&=0x0F;
    1520:	aa e3       	ldi	r26, 0x3A	; 58
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ea e3       	ldi	r30, 0x3A	; 58
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 70       	andi	r24, 0x0F	; 15
    152c:	8c 93       	st	X, r24
    152e:	cd c0       	rjmp	.+410    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==LSB_PINS)&&(Copy_u8Direction==PIN_OUTPUT))
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	59 f4       	brne	.+22     	; 0x154c <DIO_u8Set4PinsDirection+0xb0>
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	41 f4       	brne	.+16     	; 0x154c <DIO_u8Set4PinsDirection+0xb0>
		{
			DDRA|=0x0F;
    153c:	aa e3       	ldi	r26, 0x3A	; 58
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ea e3       	ldi	r30, 0x3A	; 58
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8f 60       	ori	r24, 0x0F	; 15
    1548:	8c 93       	st	X, r24
    154a:	bf c0       	rjmp	.+382    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==LSB_PINS)&&(Copy_u8Direction==PIN_INPUT))
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	82 30       	cpi	r24, 0x02	; 2
    1550:	59 f4       	brne	.+22     	; 0x1568 <DIO_u8Set4PinsDirection+0xcc>
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	88 23       	and	r24, r24
    1556:	41 f4       	brne	.+16     	; 0x1568 <DIO_u8Set4PinsDirection+0xcc>
		{
			DDRA&=0xF0;
    1558:	aa e3       	ldi	r26, 0x3A	; 58
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ea e3       	ldi	r30, 0x3A	; 58
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	80 7f       	andi	r24, 0xF0	; 240
    1564:	8c 93       	st	X, r24
    1566:	b1 c0       	rjmp	.+354    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else
		{
			Error_State=NOK;
    1568:	19 82       	std	Y+1, r1	; 0x01
    156a:	af c0       	rjmp	.+350    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		break;
	case DIO_PORTB:
		if((Copy_u8PinMode==MSB_PINS)&&(Copy_u8Direction==PIN_OUTPUT))
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	59 f4       	brne	.+22     	; 0x1588 <DIO_u8Set4PinsDirection+0xec>
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	41 f4       	brne	.+16     	; 0x1588 <DIO_u8Set4PinsDirection+0xec>
		{
			DDRB|=0xF0;
    1578:	a7 e3       	ldi	r26, 0x37	; 55
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e7 e3       	ldi	r30, 0x37	; 55
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 6f       	ori	r24, 0xF0	; 240
    1584:	8c 93       	st	X, r24
    1586:	a1 c0       	rjmp	.+322    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==MSB_PINS)&&(Copy_u8Direction==PIN_INPUT))
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	59 f4       	brne	.+22     	; 0x15a4 <DIO_u8Set4PinsDirection+0x108>
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	88 23       	and	r24, r24
    1592:	41 f4       	brne	.+16     	; 0x15a4 <DIO_u8Set4PinsDirection+0x108>
		{
			DDRB&=0x0F;
    1594:	a7 e3       	ldi	r26, 0x37	; 55
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e7 e3       	ldi	r30, 0x37	; 55
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 70       	andi	r24, 0x0F	; 15
    15a0:	8c 93       	st	X, r24
    15a2:	93 c0       	rjmp	.+294    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==LSB_PINS)&&(Copy_u8Direction==PIN_OUTPUT))
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	59 f4       	brne	.+22     	; 0x15c0 <DIO_u8Set4PinsDirection+0x124>
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	41 f4       	brne	.+16     	; 0x15c0 <DIO_u8Set4PinsDirection+0x124>
		{
			DDRB|=0x0F;
    15b0:	a7 e3       	ldi	r26, 0x37	; 55
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e7 e3       	ldi	r30, 0x37	; 55
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 60       	ori	r24, 0x0F	; 15
    15bc:	8c 93       	st	X, r24
    15be:	85 c0       	rjmp	.+266    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==LSB_PINS)&&(Copy_u8Direction==PIN_INPUT))
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	59 f4       	brne	.+22     	; 0x15dc <DIO_u8Set4PinsDirection+0x140>
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	88 23       	and	r24, r24
    15ca:	41 f4       	brne	.+16     	; 0x15dc <DIO_u8Set4PinsDirection+0x140>
		{
			DDRB&=0xF0;
    15cc:	a7 e3       	ldi	r26, 0x37	; 55
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e7 e3       	ldi	r30, 0x37	; 55
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	80 7f       	andi	r24, 0xF0	; 240
    15d8:	8c 93       	st	X, r24
    15da:	77 c0       	rjmp	.+238    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else
		{
			Error_State=NOK;
    15dc:	19 82       	std	Y+1, r1	; 0x01
    15de:	75 c0       	rjmp	.+234    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		break;
	case DIO_PORTC:
		if((Copy_u8PinMode==MSB_PINS)&&(Copy_u8Direction==PIN_OUTPUT))
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	59 f4       	brne	.+22     	; 0x15fc <DIO_u8Set4PinsDirection+0x160>
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	41 f4       	brne	.+16     	; 0x15fc <DIO_u8Set4PinsDirection+0x160>
		{
			DDRC|=0xF0;
    15ec:	a4 e3       	ldi	r26, 0x34	; 52
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e4 e3       	ldi	r30, 0x34	; 52
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	80 6f       	ori	r24, 0xF0	; 240
    15f8:	8c 93       	st	X, r24
    15fa:	67 c0       	rjmp	.+206    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==MSB_PINS)&&(Copy_u8Direction==PIN_INPUT))
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	59 f4       	brne	.+22     	; 0x1618 <DIO_u8Set4PinsDirection+0x17c>
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	88 23       	and	r24, r24
    1606:	41 f4       	brne	.+16     	; 0x1618 <DIO_u8Set4PinsDirection+0x17c>
		{
			DDRC&=0x0F;
    1608:	a4 e3       	ldi	r26, 0x34	; 52
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e4 e3       	ldi	r30, 0x34	; 52
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 70       	andi	r24, 0x0F	; 15
    1614:	8c 93       	st	X, r24
    1616:	59 c0       	rjmp	.+178    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==LSB_PINS)&&(Copy_u8Direction==PIN_OUTPUT))
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	59 f4       	brne	.+22     	; 0x1634 <DIO_u8Set4PinsDirection+0x198>
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	41 f4       	brne	.+16     	; 0x1634 <DIO_u8Set4PinsDirection+0x198>
		{
			DDRC|=0x0F;
    1624:	a4 e3       	ldi	r26, 0x34	; 52
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e4 e3       	ldi	r30, 0x34	; 52
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 60       	ori	r24, 0x0F	; 15
    1630:	8c 93       	st	X, r24
    1632:	4b c0       	rjmp	.+150    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==LSB_PINS)&&(Copy_u8Direction==PIN_INPUT))
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	59 f4       	brne	.+22     	; 0x1650 <DIO_u8Set4PinsDirection+0x1b4>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	88 23       	and	r24, r24
    163e:	41 f4       	brne	.+16     	; 0x1650 <DIO_u8Set4PinsDirection+0x1b4>
		{
			DDRC&=0xF0;
    1640:	a4 e3       	ldi	r26, 0x34	; 52
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e4 e3       	ldi	r30, 0x34	; 52
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	80 7f       	andi	r24, 0xF0	; 240
    164c:	8c 93       	st	X, r24
    164e:	3d c0       	rjmp	.+122    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else
		{
			Error_State=NOK;
    1650:	19 82       	std	Y+1, r1	; 0x01
    1652:	3b c0       	rjmp	.+118    	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		break;
	case DIO_PORTD:
		if((Copy_u8PinMode==MSB_PINS)&&(Copy_u8Direction==PIN_OUTPUT))
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	59 f4       	brne	.+22     	; 0x1670 <DIO_u8Set4PinsDirection+0x1d4>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	41 f4       	brne	.+16     	; 0x1670 <DIO_u8Set4PinsDirection+0x1d4>
		{
			DDRD|=0xF0;
    1660:	a1 e3       	ldi	r26, 0x31	; 49
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e1 e3       	ldi	r30, 0x31	; 49
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	80 6f       	ori	r24, 0xF0	; 240
    166c:	8c 93       	st	X, r24
    166e:	2d c0       	rjmp	.+90     	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==MSB_PINS)&&(Copy_u8Direction==PIN_INPUT))
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	59 f4       	brne	.+22     	; 0x168c <DIO_u8Set4PinsDirection+0x1f0>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	88 23       	and	r24, r24
    167a:	41 f4       	brne	.+16     	; 0x168c <DIO_u8Set4PinsDirection+0x1f0>
		{
			DDRD&=0x0F;
    167c:	a1 e3       	ldi	r26, 0x31	; 49
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e1 e3       	ldi	r30, 0x31	; 49
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 70       	andi	r24, 0x0F	; 15
    1688:	8c 93       	st	X, r24
    168a:	1f c0       	rjmp	.+62     	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==LSB_PINS)&&(Copy_u8Direction==PIN_OUTPUT))
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	59 f4       	brne	.+22     	; 0x16a8 <DIO_u8Set4PinsDirection+0x20c>
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	41 f4       	brne	.+16     	; 0x16a8 <DIO_u8Set4PinsDirection+0x20c>
		{
			DDRD|=0x0F;
    1698:	a1 e3       	ldi	r26, 0x31	; 49
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e1 e3       	ldi	r30, 0x31	; 49
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 60       	ori	r24, 0x0F	; 15
    16a4:	8c 93       	st	X, r24
    16a6:	11 c0       	rjmp	.+34     	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else if((Copy_u8PinMode==LSB_PINS)&&(Copy_u8Direction==PIN_INPUT))
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	59 f4       	brne	.+22     	; 0x16c4 <DIO_u8Set4PinsDirection+0x228>
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	88 23       	and	r24, r24
    16b2:	41 f4       	brne	.+16     	; 0x16c4 <DIO_u8Set4PinsDirection+0x228>
		{
			DDRD&=0xF0;
    16b4:	a1 e3       	ldi	r26, 0x31	; 49
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e1 e3       	ldi	r30, 0x31	; 49
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	80 7f       	andi	r24, 0xF0	; 240
    16c0:	8c 93       	st	X, r24
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		else
		{
			Error_State=NOK;
    16c4:	19 82       	std	Y+1, r1	; 0x01
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <DIO_u8Set4PinsDirection+0x22e>
		}
		break;
	default:
		Error_State=NOK;
    16c8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State;
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    16cc:	26 96       	adiw	r28, 0x06	; 6
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <DIO_u8Set4PinsValue>:
u8 DIO_u8Set4PinsValue(u8 Copy_u8PortNumber,u8 Copy_u8PinMode,u8 Copy_u8Value)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <DIO_u8Set4PinsValue+0x6>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <DIO_u8Set4PinsValue+0x8>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <DIO_u8Set4PinsValue+0xa>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	8a 83       	std	Y+2, r24	; 0x02
    16ee:	6b 83       	std	Y+3, r22	; 0x03
    16f0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State=OK;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3e 83       	std	Y+6, r19	; 0x06
    16fe:	2d 83       	std	Y+5, r18	; 0x05
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <DIO_u8Set4PinsValue+0x2e>
    170a:	4d c0       	rjmp	.+154    	; 0x17a6 <DIO_u8Set4PinsValue+0xc8>
    170c:	2d 81       	ldd	r18, Y+5	; 0x05
    170e:	3e 81       	ldd	r19, Y+6	; 0x06
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	2c f4       	brge	.+10     	; 0x1720 <DIO_u8Set4PinsValue+0x42>
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	71 f0       	breq	.+28     	; 0x173a <DIO_u8Set4PinsValue+0x5c>
    171e:	df c0       	rjmp	.+446    	; 0x18de <DIO_u8Set4PinsValue+0x200>
    1720:	2d 81       	ldd	r18, Y+5	; 0x05
    1722:	3e 81       	ldd	r19, Y+6	; 0x06
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	31 05       	cpc	r19, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <DIO_u8Set4PinsValue+0x4e>
    172a:	71 c0       	rjmp	.+226    	; 0x180e <DIO_u8Set4PinsValue+0x130>
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	83 30       	cpi	r24, 0x03	; 3
    1732:	91 05       	cpc	r25, r1
    1734:	09 f4       	brne	.+2      	; 0x1738 <DIO_u8Set4PinsValue+0x5a>
    1736:	9f c0       	rjmp	.+318    	; 0x1876 <DIO_u8Set4PinsValue+0x198>
    1738:	d2 c0       	rjmp	.+420    	; 0x18de <DIO_u8Set4PinsValue+0x200>
	{
	case DIO_PORTA:
		if(Copy_u8PinMode==MSB_PINS)
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	d9 f4       	brne	.+54     	; 0x1776 <DIO_u8Set4PinsValue+0x98>
		{
			Copy_u8Value=0xF0;
    1740:	80 ef       	ldi	r24, 0xF0	; 240
    1742:	8c 83       	std	Y+4, r24	; 0x04
			PORTA&=0x0F;
    1744:	ab e3       	ldi	r26, 0x3B	; 59
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	eb e3       	ldi	r30, 0x3B	; 59
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 70       	andi	r24, 0x0F	; 15
    1750:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<4);
    1752:	ab e3       	ldi	r26, 0x3B	; 59
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	eb e3       	ldi	r30, 0x3B	; 59
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	82 95       	swap	r24
    1766:	92 95       	swap	r25
    1768:	90 7f       	andi	r25, 0xF0	; 240
    176a:	98 27       	eor	r25, r24
    176c:	80 7f       	andi	r24, 0xF0	; 240
    176e:	98 27       	eor	r25, r24
    1770:	82 2b       	or	r24, r18
    1772:	8c 93       	st	X, r24
    1774:	b5 c0       	rjmp	.+362    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		else if(Copy_u8PinMode==LSB_PINS)
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	82 30       	cpi	r24, 0x02	; 2
    177a:	99 f4       	brne	.+38     	; 0x17a2 <DIO_u8Set4PinsValue+0xc4>
		{
			Copy_u8Value&=0x0F;
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	8f 70       	andi	r24, 0x0F	; 15
    1780:	8c 83       	std	Y+4, r24	; 0x04
			PORTA&=0xF0;
    1782:	ab e3       	ldi	r26, 0x3B	; 59
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	eb e3       	ldi	r30, 0x3B	; 59
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	80 7f       	andi	r24, 0xF0	; 240
    178e:	8c 93       	st	X, r24
			PORTA|=Copy_u8Value;
    1790:	ab e3       	ldi	r26, 0x3B	; 59
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e3       	ldi	r30, 0x3B	; 59
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	90 81       	ld	r25, Z
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	89 2b       	or	r24, r25
    179e:	8c 93       	st	X, r24
    17a0:	9f c0       	rjmp	.+318    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		else
		{
			Error_State=NOK;
    17a2:	19 82       	std	Y+1, r1	; 0x01
    17a4:	9d c0       	rjmp	.+314    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinMode==MSB_PINS)
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	c9 f4       	brne	.+50     	; 0x17de <DIO_u8Set4PinsValue+0x100>
		{
			PORTB&=0x0F;
    17ac:	a8 e3       	ldi	r26, 0x38	; 56
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e8 e3       	ldi	r30, 0x38	; 56
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8f 70       	andi	r24, 0x0F	; 15
    17b8:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<4);
    17ba:	a8 e3       	ldi	r26, 0x38	; 56
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e8 e3       	ldi	r30, 0x38	; 56
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	28 2f       	mov	r18, r24
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	82 95       	swap	r24
    17ce:	92 95       	swap	r25
    17d0:	90 7f       	andi	r25, 0xF0	; 240
    17d2:	98 27       	eor	r25, r24
    17d4:	80 7f       	andi	r24, 0xF0	; 240
    17d6:	98 27       	eor	r25, r24
    17d8:	82 2b       	or	r24, r18
    17da:	8c 93       	st	X, r24
    17dc:	81 c0       	rjmp	.+258    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		else if(Copy_u8PinMode==LSB_PINS)
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	99 f4       	brne	.+38     	; 0x180a <DIO_u8Set4PinsValue+0x12c>
		{
			Copy_u8Value&=0x0F;
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	8f 70       	andi	r24, 0x0F	; 15
    17e8:	8c 83       	std	Y+4, r24	; 0x04
			PORTB&=0xF0;
    17ea:	a8 e3       	ldi	r26, 0x38	; 56
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e8 e3       	ldi	r30, 0x38	; 56
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 7f       	andi	r24, 0xF0	; 240
    17f6:	8c 93       	st	X, r24
			PORTB|=Copy_u8Value;
    17f8:	a8 e3       	ldi	r26, 0x38	; 56
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e8 e3       	ldi	r30, 0x38	; 56
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	90 81       	ld	r25, Z
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	89 2b       	or	r24, r25
    1806:	8c 93       	st	X, r24
    1808:	6b c0       	rjmp	.+214    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		else
		{
			Error_State=NOK;
    180a:	19 82       	std	Y+1, r1	; 0x01
    180c:	69 c0       	rjmp	.+210    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinMode==MSB_PINS)
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	c9 f4       	brne	.+50     	; 0x1846 <DIO_u8Set4PinsValue+0x168>
		{
			PORTC&=0x0F;
    1814:	a5 e3       	ldi	r26, 0x35	; 53
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8f 70       	andi	r24, 0x0F	; 15
    1820:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<4);
    1822:	a5 e3       	ldi	r26, 0x35	; 53
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e3       	ldi	r30, 0x35	; 53
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	28 2f       	mov	r18, r24
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	82 95       	swap	r24
    1836:	92 95       	swap	r25
    1838:	90 7f       	andi	r25, 0xF0	; 240
    183a:	98 27       	eor	r25, r24
    183c:	80 7f       	andi	r24, 0xF0	; 240
    183e:	98 27       	eor	r25, r24
    1840:	82 2b       	or	r24, r18
    1842:	8c 93       	st	X, r24
    1844:	4d c0       	rjmp	.+154    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		else if(Copy_u8PinMode==LSB_PINS)
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	82 30       	cpi	r24, 0x02	; 2
    184a:	99 f4       	brne	.+38     	; 0x1872 <DIO_u8Set4PinsValue+0x194>
		{
			Copy_u8Value&=0x0F;
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	8f 70       	andi	r24, 0x0F	; 15
    1850:	8c 83       	std	Y+4, r24	; 0x04
			PORTC&=0xF0;
    1852:	a5 e3       	ldi	r26, 0x35	; 53
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e5 e3       	ldi	r30, 0x35	; 53
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 7f       	andi	r24, 0xF0	; 240
    185e:	8c 93       	st	X, r24
			PORTC|=Copy_u8Value;
    1860:	a5 e3       	ldi	r26, 0x35	; 53
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e5 e3       	ldi	r30, 0x35	; 53
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	90 81       	ld	r25, Z
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	89 2b       	or	r24, r25
    186e:	8c 93       	st	X, r24
    1870:	37 c0       	rjmp	.+110    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		else
		{
			Error_State=NOK;
    1872:	19 82       	std	Y+1, r1	; 0x01
    1874:	35 c0       	rjmp	.+106    	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinMode==MSB_PINS)
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	c9 f4       	brne	.+50     	; 0x18ae <DIO_u8Set4PinsValue+0x1d0>
		{
			PORTD&=0x0F;
    187c:	a2 e3       	ldi	r26, 0x32	; 50
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e2 e3       	ldi	r30, 0x32	; 50
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8f 70       	andi	r24, 0x0F	; 15
    1888:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<4);
    188a:	a2 e3       	ldi	r26, 0x32	; 50
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e2 e3       	ldi	r30, 0x32	; 50
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	28 2f       	mov	r18, r24
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	82 95       	swap	r24
    189e:	92 95       	swap	r25
    18a0:	90 7f       	andi	r25, 0xF0	; 240
    18a2:	98 27       	eor	r25, r24
    18a4:	80 7f       	andi	r24, 0xF0	; 240
    18a6:	98 27       	eor	r25, r24
    18a8:	82 2b       	or	r24, r18
    18aa:	8c 93       	st	X, r24
    18ac:	19 c0       	rjmp	.+50     	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		else if(Copy_u8PinMode==LSB_PINS)
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	99 f4       	brne	.+38     	; 0x18da <DIO_u8Set4PinsValue+0x1fc>
		{
			Copy_u8Value&=0x0F;
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	8f 70       	andi	r24, 0x0F	; 15
    18b8:	8c 83       	std	Y+4, r24	; 0x04
			PORTD&=0xF0;
    18ba:	a2 e3       	ldi	r26, 0x32	; 50
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e2 e3       	ldi	r30, 0x32	; 50
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	80 7f       	andi	r24, 0xF0	; 240
    18c6:	8c 93       	st	X, r24
			PORTD|=Copy_u8Value;
    18c8:	a2 e3       	ldi	r26, 0x32	; 50
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	90 81       	ld	r25, Z
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	89 2b       	or	r24, r25
    18d6:	8c 93       	st	X, r24
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		else
		{
			Error_State=NOK;
    18da:	19 82       	std	Y+1, r1	; 0x01
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <DIO_u8Set4PinsValue+0x202>
		}
		break;
	default:
		Error_State=NOK;
    18de:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e2:	26 96       	adiw	r28, 0x06	; 6
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <GIE_voidEnable>:

#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"GIE_Private.h"
void GIE_voidEnable(void)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    18fc:	af e5       	ldi	r26, 0x5F	; 95
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	ef e5       	ldi	r30, 0x5F	; 95
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	80 68       	ori	r24, 0x80	; 128
    1908:	8c 93       	st	X, r24
}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1918:	af e5       	ldi	r26, 0x5F	; 95
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	ef e5       	ldi	r30, 0x5F	; 95
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8f 77       	andi	r24, 0x7F	; 127
    1924:	8c 93       	st	X, r24
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <main>:
#include"DIO_Interface.h"
#include"servo_Interface.h"
#include<util/delay.h>

int main(void)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	2c 97       	sbiw	r28, 0x0c	; 12
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
	u64 FrontDistance;

	u32 distance;

	servo_voidTIMERInit();
    1940:	0e 94 df 0c 	call	0x19be	; 0x19be <servo_voidTIMERInit>
	servo_voidUltrInit();
    1944:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <servo_voidUltrInit>

	while(1)
	{

		distance=servo_f64UltraRead();
    1948:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <servo_f64UltraRead>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	ab 83       	std	Y+3, r26	; 0x03
    1962:	bc 83       	std	Y+4, r27	; 0x04
		FrontDistance = distance;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	ab 81       	ldd	r26, Y+3	; 0x03
    196a:	bc 81       	ldd	r27, Y+4	; 0x04
    196c:	9c 01       	movw	r18, r24
    196e:	ad 01       	movw	r20, r26
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	2d 83       	std	Y+5, r18	; 0x05
    197a:	3e 83       	std	Y+6, r19	; 0x06
    197c:	4f 83       	std	Y+7, r20	; 0x07
    197e:	58 87       	std	Y+8, r21	; 0x08
    1980:	69 87       	std	Y+9, r22	; 0x09
    1982:	7a 87       	std	Y+10, r23	; 0x0a
    1984:	8b 87       	std	Y+11, r24	; 0x0b
    1986:	9c 87       	std	Y+12, r25	; 0x0c
		if(distance >=20) // for going forward
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	ab 81       	ldd	r26, Y+3	; 0x03
    198e:	bc 81       	ldd	r27, Y+4	; 0x04
    1990:	84 31       	cpi	r24, 0x14	; 20
    1992:	91 05       	cpc	r25, r1
    1994:	a1 05       	cpc	r26, r1
    1996:	b1 05       	cpc	r27, r1
    1998:	40 f0       	brcs	.+16     	; 0x19aa <main+0x7e>
			{
			    forward();
    199a:	0e 94 6d 10 	call	0x20da	; 0x20da <forward>

				DIO_u8SetPinValue(PIN5,DIO_PORTB,LOW);
    199e:	85 e0       	ldi	r24, 0x05	; 5
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
    19a8:	cf cf       	rjmp	.-98     	; 0x1948 <main+0x1c>
			}
			else // obstacle detected turn left
			{

				DIO_u8SetPinValue(PIN5,DIO_PORTB,HIGH);
    19aa:	85 e0       	ldi	r24, 0x05	; 5
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
				push_break();
    19b4:	0e 94 a7 12 	call	0x254e	; 0x254e <push_break>
				navigate();
    19b8:	0e 94 b2 12 	call	0x2564	; 0x2564 <navigate>
    19bc:	c5 cf       	rjmp	.-118    	; 0x1948 <main+0x1c>

000019be <servo_voidTIMERInit>:
#include"servo_Private.h"
#include<util/delay.h>

u8 TimerOverflow=0;
void servo_voidTIMERInit(void)
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	2e 97       	sbiw	r28, 0x0e	; 14
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
	//NON Inverted PWM
	SET_BIT(TCCR1A,COM1A1);
    19d2:	af e4       	ldi	r26, 0x4F	; 79
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ef e4       	ldi	r30, 0x4F	; 79
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 68       	ori	r24, 0x80	; 128
    19de:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    19e0:	af e4       	ldi	r26, 0x4F	; 79
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ef e4       	ldi	r30, 0x4F	; 79
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	80 62       	ori	r24, 0x20	; 32
    19ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    19ee:	af e4       	ldi	r26, 0x4F	; 79
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ef e4       	ldi	r30, 0x4F	; 79
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	82 60       	ori	r24, 0x02	; 2
    19fa:	8c 93       	st	X, r24

	//PRESCALER=64 MODE 14(FAST PWM)
	SET_BIT(TCCR1B,WGM13);
    19fc:	ae e4       	ldi	r26, 0x4E	; 78
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ee e4       	ldi	r30, 0x4E	; 78
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 61       	ori	r24, 0x10	; 16
    1a08:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    1a0a:	ae e4       	ldi	r26, 0x4E	; 78
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ee e4       	ldi	r30, 0x4E	; 78
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	88 60       	ori	r24, 0x08	; 8
    1a16:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    1a18:	ae e4       	ldi	r26, 0x4E	; 78
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ee e4       	ldi	r30, 0x4E	; 78
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	82 60       	ori	r24, 0x02	; 2
    1a24:	8c 93       	st	X, r24
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e8       	ldi	r25, 0x80	; 128
    1a2a:	ab e3       	ldi	r26, 0x3B	; 59
    1a2c:	b5 e4       	ldi	r27, 0x45	; 69
    1a2e:	8b 87       	std	Y+11, r24	; 0x0b
    1a30:	9c 87       	std	Y+12, r25	; 0x0c
    1a32:	ad 87       	std	Y+13, r26	; 0x0d
    1a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	4a e7       	ldi	r20, 0x7A	; 122
    1a44:	55 e4       	ldi	r21, 0x45	; 69
    1a46:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8f 83       	std	Y+7, r24	; 0x07
    1a50:	98 87       	std	Y+8, r25	; 0x08
    1a52:	a9 87       	std	Y+9, r26	; 0x09
    1a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <servo_voidTIMERInit+0xba>
		__ticks = 1;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9e 83       	std	Y+6, r25	; 0x06
    1a74:	8d 83       	std	Y+5, r24	; 0x05
    1a76:	3f c0       	rjmp	.+126    	; 0x1af6 <servo_voidTIMERInit+0x138>
	else if (__tmp > 65535)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	4c f5       	brge	.+82     	; 0x1ae2 <servo_voidTIMERInit+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e2       	ldi	r20, 0x20	; 32
    1a9e:	51 e4       	ldi	r21, 0x41	; 65
    1aa0:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <servo_voidTIMERInit+0x11a>
    1aba:	80 e9       	ldi	r24, 0x90	; 144
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	9c 83       	std	Y+4, r25	; 0x04
    1ac0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <servo_voidTIMERInit+0x108>
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	69 f7       	brne	.-38     	; 0x1aba <servo_voidTIMERInit+0xfc>
    1ae0:	14 c0       	rjmp	.+40     	; 0x1b0a <servo_voidTIMERInit+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae4:	78 85       	ldd	r23, Y+8	; 0x08
    1ae6:	89 85       	ldd	r24, Y+9	; 0x09
    1ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aea:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <servo_voidTIMERInit+0x144>
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
	//SET_BIT(TCCR1B,CS10);
	_delay_ms(3000);
	//active pin OC1A&OC1B as output
	DIO_u8SetPinDirection(PIN3,DIO_PORTD,PIN_OUTPUT);
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	63 e0       	ldi	r22, 0x03	; 3
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_u8SetPinDirection>
	//DIO_u8SetPinDirection(PIN2,DIO_PORTB,PIN_OUTPUT);
}
    1b14:	2e 96       	adiw	r28, 0x0e	; 14
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <servo_voidUltrInit>:

void servo_voidUltrInit(void)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    1b2e:	a9 e5       	ldi	r26, 0x59	; 89
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e9 e5       	ldi	r30, 0x59	; 89
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 62       	ori	r24, 0x20	; 32
    1b3a:	8c 93       	st	X, r24
	GIE_voidEnable();
    1b3c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <GIE_voidEnable>
	TCCR1A=0x00;
    1b40:	ef e4       	ldi	r30, 0x4F	; 79
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	10 82       	st	Z, r1
	DIO_u8SetPinDirection(PIN_TRIGGER,DIO_PORTB,PIN_OUTPUT);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN_ECHO,DIO_PORTB,PIN_INPUT);
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_u8SetPinDirection>

}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <servo_f64UltraRead>:

f64 servo_f64UltraRead(void)
{
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	e2 97       	sbiw	r28, 0x32	; 50
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
	OCR1A = ICR1 - 2600; //~90 deg center
    1b7c:	aa e4       	ldi	r26, 0x4A	; 74
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e6 e4       	ldi	r30, 0x46	; 70
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	88 52       	subi	r24, 0x28	; 40
    1b8a:	9a 40       	sbci	r25, 0x0A	; 10
    1b8c:	11 96       	adiw	r26, 0x01	; 1
    1b8e:	9c 93       	st	X, r25
    1b90:	8e 93       	st	-X, r24
	f32 count;
	f64 distance;
	//trigger the ultrasonic
	DIO_u8SetPinValue(PIN_TRIGGER,DIO_PORTB,LOW);
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e4       	ldi	r27, 0x40	; 64
    1ba4:	8f a3       	std	Y+39, r24	; 0x27
    1ba6:	98 a7       	std	Y+40, r25	; 0x28
    1ba8:	a9 a7       	std	Y+41, r26	; 0x29
    1baa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6f a1       	ldd	r22, Y+39	; 0x27
    1bae:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	55 e4       	ldi	r21, 0x45	; 69
    1bbc:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8b a3       	std	Y+35, r24	; 0x23
    1bc6:	9c a3       	std	Y+36, r25	; 0x24
    1bc8:	ad a3       	std	Y+37, r26	; 0x25
    1bca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bce:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <servo_f64UltraRead+0x8e>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9a a3       	std	Y+34, r25	; 0x22
    1bea:	89 a3       	std	Y+33, r24	; 0x21
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <servo_f64UltraRead+0x10c>
	else if (__tmp > 65535)
    1bee:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <servo_f64UltraRead+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6f a1       	ldd	r22, Y+39	; 0x27
    1c08:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9a a3       	std	Y+34, r25	; 0x22
    1c2c:	89 a3       	std	Y+33, r24	; 0x21
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <servo_f64UltraRead+0xee>
    1c30:	80 e9       	ldi	r24, 0x90	; 144
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	98 a3       	std	Y+32, r25	; 0x20
    1c36:	8f 8f       	std	Y+31, r24	; 0x1f
    1c38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <servo_f64UltraRead+0xdc>
    1c40:	98 a3       	std	Y+32, r25	; 0x20
    1c42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	89 a1       	ldd	r24, Y+33	; 0x21
    1c46:	9a a1       	ldd	r25, Y+34	; 0x22
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9a a3       	std	Y+34, r25	; 0x22
    1c4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c50:	9a a1       	ldd	r25, Y+34	; 0x22
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <servo_f64UltraRead+0xd0>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <servo_f64UltraRead+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c60:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9a a3       	std	Y+34, r25	; 0x22
    1c6a:	89 a3       	std	Y+33, r24	; 0x21
    1c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c70:	9e 8f       	std	Y+30, r25	; 0x1e
    1c72:	8d 8f       	std	Y+29, r24	; 0x1d
    1c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <servo_f64UltraRead+0x118>
    1c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(PIN_TRIGGER,DIO_PORTB,HIGH);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e2       	ldi	r26, 0x20	; 32
    1c90:	b1 e4       	ldi	r27, 0x41	; 65
    1c92:	89 8f       	std	Y+25, r24	; 0x19
    1c94:	9a 8f       	std	Y+26, r25	; 0x1a
    1c96:	ab 8f       	std	Y+27, r26	; 0x1b
    1c98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a e7       	ldi	r20, 0x7A	; 122
    1ca8:	55 e4       	ldi	r21, 0x45	; 69
    1caa:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8d 8b       	std	Y+21, r24	; 0x15
    1cb4:	9e 8b       	std	Y+22, r25	; 0x16
    1cb6:	af 8b       	std	Y+23, r26	; 0x17
    1cb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cba:	6d 89       	ldd	r22, Y+21	; 0x15
    1cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <servo_f64UltraRead+0x17c>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9c 8b       	std	Y+20, r25	; 0x14
    1cd8:	8b 8b       	std	Y+19, r24	; 0x13
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <servo_f64UltraRead+0x1fa>
	else if (__tmp > 65535)
    1cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cde:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <servo_f64UltraRead+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9c 8b       	std	Y+20, r25	; 0x14
    1d1a:	8b 8b       	std	Y+19, r24	; 0x13
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <servo_f64UltraRead+0x1dc>
    1d1e:	80 e9       	ldi	r24, 0x90	; 144
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	9a 8b       	std	Y+18, r25	; 0x12
    1d24:	89 8b       	std	Y+17, r24	; 0x11
    1d26:	89 89       	ldd	r24, Y+17	; 0x11
    1d28:	9a 89       	ldd	r25, Y+18	; 0x12
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <servo_f64UltraRead+0x1ca>
    1d2e:	9a 8b       	std	Y+18, r25	; 0x12
    1d30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	9c 89       	ldd	r25, Y+20	; 0x14
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	9c 8b       	std	Y+20, r25	; 0x14
    1d3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <servo_f64UltraRead+0x1be>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <servo_f64UltraRead+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6d 89       	ldd	r22, Y+21	; 0x15
    1d48:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9c 8b       	std	Y+20, r25	; 0x14
    1d58:	8b 8b       	std	Y+19, r24	; 0x13
    1d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5e:	98 8b       	std	Y+16, r25	; 0x10
    1d60:	8f 87       	std	Y+15, r24	; 0x0f
    1d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d64:	98 89       	ldd	r25, Y+16	; 0x10
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <servo_f64UltraRead+0x206>
    1d6a:	98 8b       	std	Y+16, r25	; 0x10
    1d6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_u8SetPinValue(PIN_TRIGGER,DIO_PORTB,LOW);
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e0       	ldi	r26, 0x00	; 0
    1d7e:	b0 e4       	ldi	r27, 0x40	; 64
    1d80:	8b 87       	std	Y+11, r24	; 0x0b
    1d82:	9c 87       	std	Y+12, r25	; 0x0c
    1d84:	ad 87       	std	Y+13, r26	; 0x0d
    1d86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a e7       	ldi	r20, 0x7A	; 122
    1d96:	55 e4       	ldi	r21, 0x45	; 69
    1d98:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8f 83       	std	Y+7, r24	; 0x07
    1da2:	98 87       	std	Y+8, r25	; 0x08
    1da4:	a9 87       	std	Y+9, r26	; 0x09
    1da6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da8:	6f 81       	ldd	r22, Y+7	; 0x07
    1daa:	78 85       	ldd	r23, Y+8	; 0x08
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <servo_f64UltraRead+0x26a>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <servo_f64UltraRead+0x2e8>
	else if (__tmp > 65535)
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <servo_f64UltraRead+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <servo_f64UltraRead+0x2ca>
    1e0c:	80 e9       	ldi	r24, 0x90	; 144
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <servo_f64UltraRead+0x2b8>
    1e1c:	9c 83       	std	Y+4, r25	; 0x04
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <servo_f64UltraRead+0x2ac>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <servo_f64UltraRead+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	6f 81       	ldd	r22, Y+7	; 0x07
    1e36:	78 85       	ldd	r23, Y+8	; 0x08
    1e38:	89 85       	ldd	r24, Y+9	; 0x09
    1e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <servo_f64UltraRead+0x2f4>
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	TCNT1 = 0;			// Clear Timer counter
    1e5c:	ed e4       	ldi	r30, 0x4D	; 77
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	11 82       	std	Z+1, r1	; 0x01
    1e62:	10 82       	st	Z, r1
	TCCR1B = 0x41;		//capture on rising edge
    1e64:	ee e4       	ldi	r30, 0x4E	; 78
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	81 e4       	ldi	r24, 0x41	; 65
    1e6a:	80 83       	st	Z, r24
	CLR_BIT(TIFR,ICF1);	//Clear ICP flag (Input Capture flag)
    1e6c:	a8 e5       	ldi	r26, 0x58	; 88
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e8 e5       	ldi	r30, 0x58	; 88
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	8f 7d       	andi	r24, 0xDF	; 223
    1e78:	8c 93       	st	X, r24
	CLR_BIT(TIFR,TOV1);	//Clear Timer Overflow flag
    1e7a:	a8 e5       	ldi	r26, 0x58	; 88
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e8 e5       	ldi	r30, 0x58	; 88
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8b 7f       	andi	r24, 0xFB	; 251
    1e86:	8c 93       	st	X, r24

	while(GET_BIT(TIFR,ICF1)==0);
    1e88:	e8 e5       	ldi	r30, 0x58	; 88
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	82 95       	swap	r24
    1e90:	86 95       	lsr	r24
    1e92:	87 70       	andi	r24, 0x07	; 7
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	81 70       	andi	r24, 0x01	; 1
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	a1 f3       	breq	.-24     	; 0x1e88 <servo_f64UltraRead+0x328>
	TCNT1 = 0;	/* Clear Timer counter */
    1ea0:	ed e4       	ldi	r30, 0x4D	; 77
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	11 82       	std	Z+1, r1	; 0x01
    1ea6:	10 82       	st	Z, r1
	TCCR1B = 0x01;	/* Capture on falling edge */
    1ea8:	ee e4       	ldi	r30, 0x4E	; 78
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	80 83       	st	Z, r24
	CLR_BIT(TIFR,ICF1);	/* Clear ICP flag (Input Capture flag) */
    1eb0:	a8 e5       	ldi	r26, 0x58	; 88
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e8 e5       	ldi	r30, 0x58	; 88
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8f 7d       	andi	r24, 0xDF	; 223
    1ebc:	8c 93       	st	X, r24
	CLR_BIT(TIFR,TOV1);	/* Clear Timer Overflow flag */
    1ebe:	a8 e5       	ldi	r26, 0x58	; 88
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e8 e5       	ldi	r30, 0x58	; 88
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8b 7f       	andi	r24, 0xFB	; 251
    1eca:	8c 93       	st	X, r24
	TimerOverflow = 0;/* Clear Timer overflow count */
    1ecc:	10 92 0e 02 	sts	0x020E, r1

	/* Wait for falling edge */
	while(GET_BIT(TIFR,ICF1)==0);
    1ed0:	e8 e5       	ldi	r30, 0x58	; 88
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	82 95       	swap	r24
    1ed8:	86 95       	lsr	r24
    1eda:	87 70       	andi	r24, 0x07	; 7
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	81 70       	andi	r24, 0x01	; 1
    1ee2:	90 70       	andi	r25, 0x00	; 0
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	a1 f3       	breq	.-24     	; 0x1ed0 <servo_f64UltraRead+0x370>
	count = ICR1 + (65535 * TimerOverflow);	/* Take count */
    1ee8:	e6 e4       	ldi	r30, 0x46	; 70
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	91 81       	ldd	r25, Z+1	; 0x01
    1ef0:	7c 01       	movw	r14, r24
    1ef2:	00 e0       	ldi	r16, 0x00	; 0
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
    1ef6:	80 91 0e 02 	lds	r24, 0x020E
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a0 e0       	ldi	r26, 0x00	; 0
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	2f ef       	ldi	r18, 0xFF	; 255
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	0e 94 23 14 	call	0x2846	; 0x2846 <__mulsi3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8e 0d       	add	r24, r14
    1f18:	9f 1d       	adc	r25, r15
    1f1a:	a0 1f       	adc	r26, r16
    1f1c:	b1 1f       	adc	r27, r17
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 5f 04 	call	0x8be	; 0x8be <__floatsisf>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8f a7       	std	Y+47, r24	; 0x2f
    1f2c:	98 ab       	std	Y+48, r25	; 0x30
    1f2e:	a9 ab       	std	Y+49, r26	; 0x31
    1f30:	ba ab       	std	Y+50, r27	; 0x32
	/* 8MHz Timer freq, sound speed =343 m/s */
	distance = (double)count / 466.47;
    1f32:	6f a5       	ldd	r22, Y+47	; 0x2f
    1f34:	78 a9       	ldd	r23, Y+48	; 0x30
    1f36:	89 a9       	ldd	r24, Y+49	; 0x31
    1f38:	9a a9       	ldd	r25, Y+50	; 0x32
    1f3a:	29 e2       	ldi	r18, 0x29	; 41
    1f3c:	3c e3       	ldi	r19, 0x3C	; 60
    1f3e:	49 ee       	ldi	r20, 0xE9	; 233
    1f40:	53 e4       	ldi	r21, 0x43	; 67
    1f42:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	8b a7       	std	Y+43, r24	; 0x2b
    1f4c:	9c a7       	std	Y+44, r25	; 0x2c
    1f4e:	ad a7       	std	Y+45, r26	; 0x2d
    1f50:	be a7       	std	Y+46, r27	; 0x2e
	return distance;
    1f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f56:	ad a5       	ldd	r26, Y+45	; 0x2d
    1f58:	be a5       	ldd	r27, Y+46	; 0x2e
}
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	e2 96       	adiw	r28, 0x32	; 50
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	08 95       	ret

00001f78 <ISR>:



ISR(TIMER1_OVF_vect)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <ISR+0x6>
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <ISR+0x8>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
	//TimerOverflow++;	/* Increment Timer Overflow count */
	OCR1A = 255;
    1f88:	ea e4       	ldi	r30, 0x4A	; 74
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
	OCR1B = 255;
    1f94:	e8 e4       	ldi	r30, 0x48	; 72
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <motorA_forward>:



void motorA_forward()
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinValue(PIN6,DIO_PORTD,HIGH);
    1fb6:	86 e0       	ldi	r24, 0x06	; 6
    1fb8:	63 e0       	ldi	r22, 0x03	; 3
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN7,DIO_PORTD,LOW);
    1fc0:	87 e0       	ldi	r24, 0x07	; 7
    1fc2:	63 e0       	ldi	r22, 0x03	; 3
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <motorA_backward>:

void motorA_backward()
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(PIN6,DIO_PORTD,LOW);
    1fd8:	86 e0       	ldi	r24, 0x06	; 6
    1fda:	63 e0       	ldi	r22, 0x03	; 3
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN7,DIO_PORTD,HIGH);
    1fe2:	87 e0       	ldi	r24, 0x07	; 7
    1fe4:	63 e0       	ldi	r22, 0x03	; 3
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
}
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <motorA_stop>:

void motorA_stop()
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(PIN6,DIO_PORTD,LOW);
    1ffa:	86 e0       	ldi	r24, 0x06	; 6
    1ffc:	63 e0       	ldi	r22, 0x03	; 3
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN7,DIO_PORTD,LOW);
    2004:	87 e0       	ldi	r24, 0x07	; 7
    2006:	63 e0       	ldi	r22, 0x03	; 3
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
}
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <motorB_forward>:

void motorB_forward()
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(PIN3,DIO_PORTD,LOW);
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	63 e0       	ldi	r22, 0x03	; 3
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN4,DIO_PORTD,HIGH);
    2026:	84 e0       	ldi	r24, 0x04	; 4
    2028:	63 e0       	ldi	r22, 0x03	; 3
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
}
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <motorB_backward>:

void motorB_backward()
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(PIN4,DIO_PORTD,LOW);
    203e:	84 e0       	ldi	r24, 0x04	; 4
    2040:	63 e0       	ldi	r22, 0x03	; 3
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN3,DIO_PORTD,HIGH);
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	63 e0       	ldi	r22, 0x03	; 3
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>

}
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <motorB_stop>:

void motorB_stop()
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(PIN4,DIO_PORTD,LOW);
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	63 e0       	ldi	r22, 0x03	; 3
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN3,DIO_PORTD,LOW);
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	63 e0       	ldi	r22, 0x03	; 3
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_u8SetPinValue>
}
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <motorA_on>:

void motorA_on()
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
	OCR1A = 1 *255;
    2082:	ea e4       	ldi	r30, 0x4A	; 74
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	8f ef       	ldi	r24, 0xFF	; 255
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <motorA_off>:

void motorA_off()
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
	OCR1A = 0;
    209c:	ea e4       	ldi	r30, 0x4A	; 74
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	11 82       	std	Z+1, r1	; 0x01
    20a2:	10 82       	st	Z, r1
}
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <motorB_on>:

void motorB_on()
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
	OCR1B = 1 *255;
    20b2:	e8 e4       	ldi	r30, 0x48	; 72
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	8f ef       	ldi	r24, 0xFF	; 255
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	80 83       	st	Z, r24
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <motorB_off>:

void motorB_off()
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
	OCR1B = 0;
    20cc:	e8 e4       	ldi	r30, 0x48	; 72
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	11 82       	std	Z+1, r1	; 0x01
    20d2:	10 82       	st	Z, r1
}
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <forward>:

//Movment Functions
void forward()
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
	motorA_forward();
    20e2:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <motorA_forward>
	motorB_forward();
    20e6:	0e 94 0a 10 	call	0x2014	; 0x2014 <motorB_forward>

}
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <backward>:

void backward()
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	2e 97       	sbiw	r28, 0x0e	; 14
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
	motorA_backward();
    2104:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <motorA_backward>
	motorB_backward();
    2108:	0e 94 1b 10 	call	0x2036	; 0x2036 <motorB_backward>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	aa ef       	ldi	r26, 0xFA	; 250
    2112:	b3 e4       	ldi	r27, 0x43	; 67
    2114:	8b 87       	std	Y+11, r24	; 0x0b
    2116:	9c 87       	std	Y+12, r25	; 0x0c
    2118:	ad 87       	std	Y+13, r26	; 0x0d
    211a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211c:	6b 85       	ldd	r22, Y+11	; 0x0b
    211e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2120:	8d 85       	ldd	r24, Y+13	; 0x0d
    2122:	9e 85       	ldd	r25, Y+14	; 0x0e
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	4a e7       	ldi	r20, 0x7A	; 122
    212a:	55 e4       	ldi	r21, 0x45	; 69
    212c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	8f 83       	std	Y+7, r24	; 0x07
    2136:	98 87       	std	Y+8, r25	; 0x08
    2138:	a9 87       	std	Y+9, r26	; 0x09
    213a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e8       	ldi	r20, 0x80	; 128
    214a:	5f e3       	ldi	r21, 0x3F	; 63
    214c:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2150:	88 23       	and	r24, r24
    2152:	2c f4       	brge	.+10     	; 0x215e <backward+0x6e>
		__ticks = 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	3f c0       	rjmp	.+126    	; 0x21dc <backward+0xec>
	else if (__tmp > 65535)
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	3f ef       	ldi	r19, 0xFF	; 255
    216a:	4f e7       	ldi	r20, 0x7F	; 127
    216c:	57 e4       	ldi	r21, 0x47	; 71
    216e:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2172:	18 16       	cp	r1, r24
    2174:	4c f5       	brge	.+82     	; 0x21c8 <backward+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2176:	6b 85       	ldd	r22, Y+11	; 0x0b
    2178:	7c 85       	ldd	r23, Y+12	; 0x0c
    217a:	8d 85       	ldd	r24, Y+13	; 0x0d
    217c:	9e 85       	ldd	r25, Y+14	; 0x0e
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e2       	ldi	r20, 0x20	; 32
    2184:	51 e4       	ldi	r21, 0x41	; 65
    2186:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9e 83       	std	Y+6, r25	; 0x06
    219c:	8d 83       	std	Y+5, r24	; 0x05
    219e:	0f c0       	rjmp	.+30     	; 0x21be <backward+0xce>
    21a0:	80 e9       	ldi	r24, 0x90	; 144
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	9c 83       	std	Y+4, r25	; 0x04
    21a6:	8b 83       	std	Y+3, r24	; 0x03
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <backward+0xbc>
    21b0:	9c 83       	std	Y+4, r25	; 0x04
    21b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21be:	8d 81       	ldd	r24, Y+5	; 0x05
    21c0:	9e 81       	ldd	r25, Y+6	; 0x06
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	69 f7       	brne	.-38     	; 0x21a0 <backward+0xb0>
    21c6:	14 c0       	rjmp	.+40     	; 0x21f0 <backward+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ca:	78 85       	ldd	r23, Y+8	; 0x08
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	9a 83       	std	Y+2, r25	; 0x02
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <backward+0xf8>
    21ec:	9a 83       	std	Y+2, r25	; 0x02
    21ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    21f0:	2e 96       	adiw	r28, 0x0e	; 14
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <spin>:
void spin()
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	2e 97       	sbiw	r28, 0x0e	; 14
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
	motorA_forward();
    2216:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <motorA_forward>
	motorB_backward();
    221a:	0e 94 1b 10 	call	0x2036	; 0x2036 <motorB_backward>
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	aa ef       	ldi	r26, 0xFA	; 250
    2224:	b3 e4       	ldi	r27, 0x43	; 67
    2226:	8b 87       	std	Y+11, r24	; 0x0b
    2228:	9c 87       	std	Y+12, r25	; 0x0c
    222a:	ad 87       	std	Y+13, r26	; 0x0d
    222c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2230:	7c 85       	ldd	r23, Y+12	; 0x0c
    2232:	8d 85       	ldd	r24, Y+13	; 0x0d
    2234:	9e 85       	ldd	r25, Y+14	; 0x0e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a e7       	ldi	r20, 0x7A	; 122
    223c:	55 e4       	ldi	r21, 0x45	; 69
    223e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8f 83       	std	Y+7, r24	; 0x07
    2248:	98 87       	std	Y+8, r25	; 0x08
    224a:	a9 87       	std	Y+9, r26	; 0x09
    224c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224e:	6f 81       	ldd	r22, Y+7	; 0x07
    2250:	78 85       	ldd	r23, Y+8	; 0x08
    2252:	89 85       	ldd	r24, Y+9	; 0x09
    2254:	9a 85       	ldd	r25, Y+10	; 0x0a
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e8       	ldi	r20, 0x80	; 128
    225c:	5f e3       	ldi	r21, 0x3F	; 63
    225e:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2262:	88 23       	and	r24, r24
    2264:	2c f4       	brge	.+10     	; 0x2270 <spin+0x6e>
		__ticks = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	3f c0       	rjmp	.+126    	; 0x22ee <spin+0xec>
	else if (__tmp > 65535)
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	4c f5       	brge	.+82     	; 0x22da <spin+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2288:	6b 85       	ldd	r22, Y+11	; 0x0b
    228a:	7c 85       	ldd	r23, Y+12	; 0x0c
    228c:	8d 85       	ldd	r24, Y+13	; 0x0d
    228e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e2       	ldi	r20, 0x20	; 32
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	0f c0       	rjmp	.+30     	; 0x22d0 <spin+0xce>
    22b2:	80 e9       	ldi	r24, 0x90	; 144
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <spin+0xbc>
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <spin+0xb0>
    22d8:	14 c0       	rjmp	.+40     	; 0x2302 <spin+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <spin+0xf8>
    22fe:	9a 83       	std	Y+2, r25	; 0x02
    2300:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2302:	2e 96       	adiw	r28, 0x0e	; 14
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <right>:

void right()
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	2e 97       	sbiw	r28, 0x0e	; 14
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
	motorA_stop();
    2328:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <motorA_stop>
	motorB_forward();
    232c:	0e 94 0a 10 	call	0x2014	; 0x2014 <motorB_forward>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	aa ef       	ldi	r26, 0xFA	; 250
    2336:	b3 e4       	ldi	r27, 0x43	; 67
    2338:	8b 87       	std	Y+11, r24	; 0x0b
    233a:	9c 87       	std	Y+12, r25	; 0x0c
    233c:	ad 87       	std	Y+13, r26	; 0x0d
    233e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2340:	6b 85       	ldd	r22, Y+11	; 0x0b
    2342:	7c 85       	ldd	r23, Y+12	; 0x0c
    2344:	8d 85       	ldd	r24, Y+13	; 0x0d
    2346:	9e 85       	ldd	r25, Y+14	; 0x0e
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4a e7       	ldi	r20, 0x7A	; 122
    234e:	55 e4       	ldi	r21, 0x45	; 69
    2350:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	8f 83       	std	Y+7, r24	; 0x07
    235a:	98 87       	std	Y+8, r25	; 0x08
    235c:	a9 87       	std	Y+9, r26	; 0x09
    235e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2374:	88 23       	and	r24, r24
    2376:	2c f4       	brge	.+10     	; 0x2382 <right+0x6e>
		__ticks = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
    2380:	3f c0       	rjmp	.+126    	; 0x2400 <right+0xec>
	else if (__tmp > 65535)
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	57 e4       	ldi	r21, 0x47	; 71
    2392:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    2396:	18 16       	cp	r1, r24
    2398:	4c f5       	brge	.+82     	; 0x23ec <right+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239a:	6b 85       	ldd	r22, Y+11	; 0x0b
    239c:	7c 85       	ldd	r23, Y+12	; 0x0c
    239e:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e2       	ldi	r20, 0x20	; 32
    23a8:	51 e4       	ldi	r21, 0x41	; 65
    23aa:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <right+0xce>
    23c4:	80 e9       	ldi	r24, 0x90	; 144
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <right+0xbc>
    23d4:	9c 83       	std	Y+4, r25	; 0x04
    23d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	9e 81       	ldd	r25, Y+6	; 0x06
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	69 f7       	brne	.-38     	; 0x23c4 <right+0xb0>
    23ea:	14 c0       	rjmp	.+40     	; 0x2414 <right+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	9a 81       	ldd	r25, Y+2	; 0x02
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <right+0xf8>
    2410:	9a 83       	std	Y+2, r25	; 0x02
    2412:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2414:	2e 96       	adiw	r28, 0x0e	; 14
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <left>:

void left()
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	2e 97       	sbiw	r28, 0x0e	; 14
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
	motorA_forward();
    243a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <motorA_forward>
	motorB_stop();
    243e:	0e 94 2c 10 	call	0x2058	; 0x2058 <motorB_stop>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	aa ef       	ldi	r26, 0xFA	; 250
    2448:	b3 e4       	ldi	r27, 0x43	; 67
    244a:	8b 87       	std	Y+11, r24	; 0x0b
    244c:	9c 87       	std	Y+12, r25	; 0x0c
    244e:	ad 87       	std	Y+13, r26	; 0x0d
    2450:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	6b 85       	ldd	r22, Y+11	; 0x0b
    2454:	7c 85       	ldd	r23, Y+12	; 0x0c
    2456:	8d 85       	ldd	r24, Y+13	; 0x0d
    2458:	9e 85       	ldd	r25, Y+14	; 0x0e
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a e7       	ldi	r20, 0x7A	; 122
    2460:	55 e4       	ldi	r21, 0x45	; 69
    2462:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8f 83       	std	Y+7, r24	; 0x07
    246c:	98 87       	std	Y+8, r25	; 0x08
    246e:	a9 87       	std	Y+9, r26	; 0x09
    2470:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <left+0x6e>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <left+0xec>
	else if (__tmp > 65535)
    2494:	6f 81       	ldd	r22, Y+7	; 0x07
    2496:	78 85       	ldd	r23, Y+8	; 0x08
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <left+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <left+0xce>
    24d6:	80 e9       	ldi	r24, 0x90	; 144
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <left+0xbc>
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <left+0xb0>
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <left+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <left+0xf8>
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2526:	2e 96       	adiw	r28, 0x0e	; 14
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <enableMotor>:


void enableMotor()
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
	motorA_on();
    2540:	0e 94 3d 10 	call	0x207a	; 0x207a <motorA_on>
	motorB_on();
    2544:	0e 94 55 10 	call	0x20aa	; 0x20aa <motorB_on>
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <push_break>:
void push_break()
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	motorA_stop();
    2556:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <motorA_stop>
	motorB_stop();
    255a:	0e 94 2c 10 	call	0x2058	; 0x2058 <motorB_stop>

}
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <navigate>:
void navigate()
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	a8 97       	sbiw	r28, 0x28	; 40
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
	f64 LeftDistance,distance,RightDistance;
	OCR1A = ICR1 - 3800; // move servo to left ~155 DEG
    2578:	aa e4       	ldi	r26, 0x4A	; 74
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e6 e4       	ldi	r30, 0x46	; 70
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	88 5d       	subi	r24, 0xD8	; 216
    2586:	9e 40       	sbci	r25, 0x0E	; 14
    2588:	11 96       	adiw	r26, 0x01	; 1
    258a:	9c 93       	st	X, r25
    258c:	8e 93       	st	-X, r24
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	aa ef       	ldi	r26, 0xFA	; 250
    2594:	b4 e4       	ldi	r27, 0x44	; 68
    2596:	89 8f       	std	Y+25, r24	; 0x19
    2598:	9a 8f       	std	Y+26, r25	; 0x1a
    259a:	ab 8f       	std	Y+27, r26	; 0x1b
    259c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259e:	69 8d       	ldd	r22, Y+25	; 0x19
    25a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4a e7       	ldi	r20, 0x7A	; 122
    25ac:	55 e4       	ldi	r21, 0x45	; 69
    25ae:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	8d 8b       	std	Y+21, r24	; 0x15
    25b8:	9e 8b       	std	Y+22, r25	; 0x16
    25ba:	af 8b       	std	Y+23, r26	; 0x17
    25bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25be:	6d 89       	ldd	r22, Y+21	; 0x15
    25c0:	7e 89       	ldd	r23, Y+22	; 0x16
    25c2:	8f 89       	ldd	r24, Y+23	; 0x17
    25c4:	98 8d       	ldd	r25, Y+24	; 0x18
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e8       	ldi	r20, 0x80	; 128
    25cc:	5f e3       	ldi	r21, 0x3F	; 63
    25ce:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    25d2:	88 23       	and	r24, r24
    25d4:	2c f4       	brge	.+10     	; 0x25e0 <navigate+0x7c>
		__ticks = 1;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9c 8b       	std	Y+20, r25	; 0x14
    25dc:	8b 8b       	std	Y+19, r24	; 0x13
    25de:	3f c0       	rjmp	.+126    	; 0x265e <navigate+0xfa>
	else if (__tmp > 65535)
    25e0:	6d 89       	ldd	r22, Y+21	; 0x15
    25e2:	7e 89       	ldd	r23, Y+22	; 0x16
    25e4:	8f 89       	ldd	r24, Y+23	; 0x17
    25e6:	98 8d       	ldd	r25, Y+24	; 0x18
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	3f ef       	ldi	r19, 0xFF	; 255
    25ec:	4f e7       	ldi	r20, 0x7F	; 127
    25ee:	57 e4       	ldi	r21, 0x47	; 71
    25f0:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    25f4:	18 16       	cp	r1, r24
    25f6:	4c f5       	brge	.+82     	; 0x264a <navigate+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f8:	69 8d       	ldd	r22, Y+25	; 0x19
    25fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	51 e4       	ldi	r21, 0x41	; 65
    2608:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	9c 8b       	std	Y+20, r25	; 0x14
    261e:	8b 8b       	std	Y+19, r24	; 0x13
    2620:	0f c0       	rjmp	.+30     	; 0x2640 <navigate+0xdc>
    2622:	80 e9       	ldi	r24, 0x90	; 144
    2624:	91 e0       	ldi	r25, 0x01	; 1
    2626:	9a 8b       	std	Y+18, r25	; 0x12
    2628:	89 8b       	std	Y+17, r24	; 0x11
    262a:	89 89       	ldd	r24, Y+17	; 0x11
    262c:	9a 89       	ldd	r25, Y+18	; 0x12
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <navigate+0xca>
    2632:	9a 8b       	std	Y+18, r25	; 0x12
    2634:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2636:	8b 89       	ldd	r24, Y+19	; 0x13
    2638:	9c 89       	ldd	r25, Y+20	; 0x14
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	9c 8b       	std	Y+20, r25	; 0x14
    263e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2640:	8b 89       	ldd	r24, Y+19	; 0x13
    2642:	9c 89       	ldd	r25, Y+20	; 0x14
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	69 f7       	brne	.-38     	; 0x2622 <navigate+0xbe>
    2648:	14 c0       	rjmp	.+40     	; 0x2672 <navigate+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264a:	6d 89       	ldd	r22, Y+21	; 0x15
    264c:	7e 89       	ldd	r23, Y+22	; 0x16
    264e:	8f 89       	ldd	r24, Y+23	; 0x17
    2650:	98 8d       	ldd	r25, Y+24	; 0x18
    2652:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9c 8b       	std	Y+20, r25	; 0x14
    265c:	8b 8b       	std	Y+19, r24	; 0x13
    265e:	8b 89       	ldd	r24, Y+19	; 0x13
    2660:	9c 89       	ldd	r25, Y+20	; 0x14
    2662:	98 8b       	std	Y+16, r25	; 0x10
    2664:	8f 87       	std	Y+15, r24	; 0x0f
    2666:	8f 85       	ldd	r24, Y+15	; 0x0f
    2668:	98 89       	ldd	r25, Y+16	; 0x10
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <navigate+0x106>
    266e:	98 8b       	std	Y+16, r25	; 0x10
    2670:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	distance=servo_f64UltraRead();
    2672:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <servo_f64UltraRead>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	89 a3       	std	Y+33, r24	; 0x21
    267c:	9a a3       	std	Y+34, r25	; 0x22
    267e:	ab a3       	std	Y+35, r26	; 0x23
    2680:	bc a3       	std	Y+36, r27	; 0x24
	LeftDistance = distance;
    2682:	89 a1       	ldd	r24, Y+33	; 0x21
    2684:	9a a1       	ldd	r25, Y+34	; 0x22
    2686:	ab a1       	ldd	r26, Y+35	; 0x23
    2688:	bc a1       	ldd	r27, Y+36	; 0x24
    268a:	8d a3       	std	Y+37, r24	; 0x25
    268c:	9e a3       	std	Y+38, r25	; 0x26
    268e:	af a3       	std	Y+39, r26	; 0x27
    2690:	b8 a7       	std	Y+40, r27	; 0x28

	OCR1A = ICR1 - 1700; // ~15-20 degrees
    2692:	aa e4       	ldi	r26, 0x4A	; 74
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e6 e4       	ldi	r30, 0x46	; 70
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	84 5a       	subi	r24, 0xA4	; 164
    26a0:	96 40       	sbci	r25, 0x06	; 6
    26a2:	11 96       	adiw	r26, 0x01	; 1
    26a4:	9c 93       	st	X, r25
    26a6:	8e 93       	st	-X, r24
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	aa ef       	ldi	r26, 0xFA	; 250
    26ae:	b4 e4       	ldi	r27, 0x44	; 68
    26b0:	8b 87       	std	Y+11, r24	; 0x0b
    26b2:	9c 87       	std	Y+12, r25	; 0x0c
    26b4:	ad 87       	std	Y+13, r26	; 0x0d
    26b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a e7       	ldi	r20, 0x7A	; 122
    26c6:	55 e4       	ldi	r21, 0x45	; 69
    26c8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8f 83       	std	Y+7, r24	; 0x07
    26d2:	98 87       	std	Y+8, r25	; 0x08
    26d4:	a9 87       	std	Y+9, r26	; 0x09
    26d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26d8:	6f 81       	ldd	r22, Y+7	; 0x07
    26da:	78 85       	ldd	r23, Y+8	; 0x08
    26dc:	89 85       	ldd	r24, Y+9	; 0x09
    26de:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <navigate+0x196>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <navigate+0x214>
	else if (__tmp > 65535)
    26fa:	6f 81       	ldd	r22, Y+7	; 0x07
    26fc:	78 85       	ldd	r23, Y+8	; 0x08
    26fe:	89 85       	ldd	r24, Y+9	; 0x09
    2700:	9a 85       	ldd	r25, Y+10	; 0x0a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 cf 03 	call	0x79e	; 0x79e <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <navigate+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	6b 85       	ldd	r22, Y+11	; 0x0b
    2714:	7c 85       	ldd	r23, Y+12	; 0x0c
    2716:	8d 85       	ldd	r24, Y+13	; 0x0d
    2718:	9e 85       	ldd	r25, Y+14	; 0x0e
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	0f c0       	rjmp	.+30     	; 0x275a <navigate+0x1f6>
    273c:	80 e9       	ldi	r24, 0x90	; 144
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	9c 83       	std	Y+4, r25	; 0x04
    2742:	8b 83       	std	Y+3, r24	; 0x03
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <navigate+0x1e4>
    274c:	9c 83       	std	Y+4, r25	; 0x04
    274e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	9e 81       	ldd	r25, Y+6	; 0x06
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <navigate+0x1d8>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <navigate+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6f 81       	ldd	r22, Y+7	; 0x07
    2766:	78 85       	ldd	r23, Y+8	; 0x08
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	9a 83       	std	Y+2, r25	; 0x02
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <navigate+0x220>
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	distance=servo_f64UltraRead();
    278c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <servo_f64UltraRead>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	89 a3       	std	Y+33, r24	; 0x21
    2796:	9a a3       	std	Y+34, r25	; 0x22
    2798:	ab a3       	std	Y+35, r26	; 0x23
    279a:	bc a3       	std	Y+36, r27	; 0x24
	RightDistance = distance;
    279c:	89 a1       	ldd	r24, Y+33	; 0x21
    279e:	9a a1       	ldd	r25, Y+34	; 0x22
    27a0:	ab a1       	ldd	r26, Y+35	; 0x23
    27a2:	bc a1       	ldd	r27, Y+36	; 0x24
    27a4:	8d 8f       	std	Y+29, r24	; 0x1d
    27a6:	9e 8f       	std	Y+30, r25	; 0x1e
    27a8:	af 8f       	std	Y+31, r26	; 0x1f
    27aa:	b8 a3       	std	Y+32, r27	; 0x20

	if( (RightDistance - LeftDistance) < 7)
    27ac:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27ae:	7e 8d       	ldd	r23, Y+30	; 0x1e
    27b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b2:	98 a1       	ldd	r25, Y+32	; 0x20
    27b4:	2d a1       	ldd	r18, Y+37	; 0x25
    27b6:	3e a1       	ldd	r19, Y+38	; 0x26
    27b8:	4f a1       	ldd	r20, Y+39	; 0x27
    27ba:	58 a5       	ldd	r21, Y+40	; 0x28
    27bc:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 ee       	ldi	r20, 0xE0	; 224
    27ce:	50 e4       	ldi	r21, 0x40	; 64
    27d0:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    27d4:	88 23       	and	r24, r24
    27d6:	6c f4       	brge	.+26     	; 0x27f2 <navigate+0x28e>
	{
		backward(700);
    27d8:	8c eb       	ldi	r24, 0xBC	; 188
    27da:	92 e0       	ldi	r25, 0x02	; 2
    27dc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <backward>
		right(700);
    27e0:	8c eb       	ldi	r24, 0xBC	; 188
    27e2:	92 e0       	ldi	r25, 0x02	; 2
    27e4:	0e 94 8a 11 	call	0x2314	; 0x2314 <right>
		spin(500);
    27e8:	84 ef       	ldi	r24, 0xF4	; 244
    27ea:	91 e0       	ldi	r25, 0x01	; 1
    27ec:	0e 94 01 11 	call	0x2202	; 0x2202 <spin>
    27f0:	21 c0       	rjmp	.+66     	; 0x2834 <navigate+0x2d0>
	}
	else if(RightDistance < LeftDistance)
    27f2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27f4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    27f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f8:	98 a1       	ldd	r25, Y+32	; 0x20
    27fa:	2d a1       	ldd	r18, Y+37	; 0x25
    27fc:	3e a1       	ldd	r19, Y+38	; 0x26
    27fe:	4f a1       	ldd	r20, Y+39	; 0x27
    2800:	58 a5       	ldd	r21, Y+40	; 0x28
    2802:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	2c f4       	brge	.+10     	; 0x2814 <navigate+0x2b0>
	{
		left(500);
    280a:	84 ef       	ldi	r24, 0xF4	; 244
    280c:	91 e0       	ldi	r25, 0x01	; 1
    280e:	0e 94 13 12 	call	0x2426	; 0x2426 <left>
    2812:	10 c0       	rjmp	.+32     	; 0x2834 <navigate+0x2d0>
	}
	else if(LeftDistance < RightDistance)
    2814:	6d a1       	ldd	r22, Y+37	; 0x25
    2816:	7e a1       	ldd	r23, Y+38	; 0x26
    2818:	8f a1       	ldd	r24, Y+39	; 0x27
    281a:	98 a5       	ldd	r25, Y+40	; 0x28
    281c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    281e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2820:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2822:	58 a1       	ldd	r21, Y+32	; 0x20
    2824:	0e 94 2f 04 	call	0x85e	; 0x85e <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	24 f4       	brge	.+8      	; 0x2834 <navigate+0x2d0>
		right(500);
    282c:	84 ef       	ldi	r24, 0xF4	; 244
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	0e 94 8a 11 	call	0x2314	; 0x2314 <right>
}
    2834:	a8 96       	adiw	r28, 0x28	; 40
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <__mulsi3>:
    2846:	62 9f       	mul	r22, r18
    2848:	d0 01       	movw	r26, r0
    284a:	73 9f       	mul	r23, r19
    284c:	f0 01       	movw	r30, r0
    284e:	82 9f       	mul	r24, r18
    2850:	e0 0d       	add	r30, r0
    2852:	f1 1d       	adc	r31, r1
    2854:	64 9f       	mul	r22, r20
    2856:	e0 0d       	add	r30, r0
    2858:	f1 1d       	adc	r31, r1
    285a:	92 9f       	mul	r25, r18
    285c:	f0 0d       	add	r31, r0
    285e:	83 9f       	mul	r24, r19
    2860:	f0 0d       	add	r31, r0
    2862:	74 9f       	mul	r23, r20
    2864:	f0 0d       	add	r31, r0
    2866:	65 9f       	mul	r22, r21
    2868:	f0 0d       	add	r31, r0
    286a:	99 27       	eor	r25, r25
    286c:	72 9f       	mul	r23, r18
    286e:	b0 0d       	add	r27, r0
    2870:	e1 1d       	adc	r30, r1
    2872:	f9 1f       	adc	r31, r25
    2874:	63 9f       	mul	r22, r19
    2876:	b0 0d       	add	r27, r0
    2878:	e1 1d       	adc	r30, r1
    287a:	f9 1f       	adc	r31, r25
    287c:	bd 01       	movw	r22, r26
    287e:	cf 01       	movw	r24, r30
    2880:	11 24       	eor	r1, r1
    2882:	08 95       	ret

00002884 <__prologue_saves__>:
    2884:	2f 92       	push	r2
    2886:	3f 92       	push	r3
    2888:	4f 92       	push	r4
    288a:	5f 92       	push	r5
    288c:	6f 92       	push	r6
    288e:	7f 92       	push	r7
    2890:	8f 92       	push	r8
    2892:	9f 92       	push	r9
    2894:	af 92       	push	r10
    2896:	bf 92       	push	r11
    2898:	cf 92       	push	r12
    289a:	df 92       	push	r13
    289c:	ef 92       	push	r14
    289e:	ff 92       	push	r15
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	ca 1b       	sub	r28, r26
    28ae:	db 0b       	sbc	r29, r27
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	09 94       	ijmp

000028bc <__epilogue_restores__>:
    28bc:	2a 88       	ldd	r2, Y+18	; 0x12
    28be:	39 88       	ldd	r3, Y+17	; 0x11
    28c0:	48 88       	ldd	r4, Y+16	; 0x10
    28c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    28c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    28c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    28c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    28ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    28cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ce:	b9 84       	ldd	r11, Y+9	; 0x09
    28d0:	c8 84       	ldd	r12, Y+8	; 0x08
    28d2:	df 80       	ldd	r13, Y+7	; 0x07
    28d4:	ee 80       	ldd	r14, Y+6	; 0x06
    28d6:	fd 80       	ldd	r15, Y+5	; 0x05
    28d8:	0c 81       	ldd	r16, Y+4	; 0x04
    28da:	1b 81       	ldd	r17, Y+3	; 0x03
    28dc:	aa 81       	ldd	r26, Y+2	; 0x02
    28de:	b9 81       	ldd	r27, Y+1	; 0x01
    28e0:	ce 0f       	add	r28, r30
    28e2:	d1 1d       	adc	r29, r1
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	ed 01       	movw	r28, r26
    28f0:	08 95       	ret

000028f2 <_exit>:
    28f2:	f8 94       	cli

000028f4 <__stop_program>:
    28f4:	ff cf       	rjmp	.-2      	; 0x28f4 <__stop_program>
